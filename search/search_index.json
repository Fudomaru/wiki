{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Digital Dojo","text":"<p>\u201cThe faintest ink is better than the best memory.\u201d</p> <p>Welcome to my Digital Dojo, part lab notebook, part black book, part brain dump. This isn\u2019t a blog. It\u2019s not a portfolio. It\u2019s my system. My memory, externalized. My training ground, documented.  </p> <p>What you'll find here:</p> <ul> <li>Linux Wizardry: Real-world tricks, CLI sorcery, and system insights</li> <li>Cybersecurity: Core knowledge, personal playbooks, and tools of the trade</li> <li>CTFs &amp; Wargames: Walkthroughs, failures, and wins \u2014 OverTheWire, HTB, TryHackMe</li> <li>Notes: Certs, reading lists, tech write-ups, and more</li> </ul> <p>This space evolves with me. Some notes are polished. Others are messy. That\u2019s the point \u2014 it\u2019s all part of the grind.</p> <p>Don\u2019t read. Steal. Fork ideas. Twist commands. Make them yours.</p>"},{"location":"about/","title":"About","text":"<p>Hi, I\u2019m Fudomaru, system administrator, cybersecurity apprentice, and relentless learner.</p> <p>I built this wiki to:</p> <ul> <li>Think in public (even if the public is just future-me)</li> <li>Document every lesson worth remembering</li> <li>Build a habit of writing as I learn</li> </ul> <p>What drives me?</p> <ul> <li>The elegance of a perfectly tuned Linux system</li> <li>The thrill of cracking open a CTF box</li> <li>The idea that clarity is power, and this wiki is how I forge it</li> </ul> <p>My endgame? Offensive security. Bug bounty. Mastery.</p> <p>Right now, I\u2019m leveling up my fundamentals and leaving a paper trail as I go.</p>"},{"location":"cybersec/fundamentals/","title":"Cybersec Fundamenals","text":""},{"location":"cybersec/fundamentals/#what-is-this-page","title":"What is this Page","text":"<p>This is my personal crash course into cybersecurity. I use it to track concepts, tools and tactis I pick up and get to use efficantly in CTFs and during my learning.  </p> <p>It evolves as I learn!</p>"},{"location":"cybersec/fundamentals/#the-mindset-of-a-hacker","title":"The Mindset of a Hacker","text":"<ul> <li> <p>Thinking outside the box: Try to find as many ways to use tools and systems as you can. There is never the right way, there are only endless possibilities.  </p> </li> <li> <p>The Why is more important then the How: Understanding why something is done, the motivation and psychologie behind it, you find the weak points.  </p> </li> <li> <p>No is not an option: You often get the best results, after nothing works and you have to get creative.  </p> </li> <li> <p>See the System: To figure something out, and really understand it, it is often recommended to take a step back.   </p> </li> <li> <p>Attention to Detail: Pay close attention to every detail and be persistent in figuring out the why.   </p> </li> <li> <p>\"Man lernt nie aus\": This is not just a phrase, it is a philosophy  </p> </li> </ul>"},{"location":"cybersec/fundamentals/#core-concepts-to-understand","title":"Core Concepts to Understand","text":"<ul> <li> <p>CIA Triade: The three core parts to make things secure. Look at this on every level, from singel packages to complete infrastructures. If any is missing, that is where things go wrong.  </p> </li> <li> <p>OWASP Top 10: The most commen vulnarbilities found in the wild. Learn them, know them, and look for them everywhere.  </p> </li> <li> <p>Defense in depth: Layering security strategies, always know that every layer will be breached. So configure every layer like it is the first and last defence.  </p> </li> <li> <p>Privilege escalation: Type of attack where a unauthorized user gains access to more then they should. There are two ways for that, vertical and horizontal. Vertical movement is going up the food ladder, to management and admin. Horizontal means staying on your permission level, but accessing a different user, gaining confidentail data.  </p> </li> <li> <p>Post Exploitation: Don't forget that most seriouse attackers are not done after they get access. They will try to get persistence, escalate privileges, and gather information.  </p> </li> </ul>"},{"location":"cybersec/fundamentals/#tools-i-use","title":"Tools I use","text":"<ul> <li> <p>nmap: Networkscanner of choice. </p> </li> <li> <p>Burp Suite: Package interception, changing and exploring of WebApps on a new level.  </p> </li> <li> <p>John the Ripper: Because weak passwords are still more common then you think.  </p> </li> <li> <p>ffuf: Because Enumerating is at least half of the game.  </p> </li> <li> <p>netcat: The Swiss army knife of raw Networking Connections.  </p> </li> </ul>"},{"location":"cybersec/fundamentals/#my-learning-plan","title":"My Learning Plan","text":"<p>Phase 1: Basics - get as much Hands on as you can. Phase 2: Enumeration - try to learn to understand systems quickly. Phase 3: Exploration - warming up with all the common bugs. Phase 4: Real World - getting my Hands dirty in Bug Bounty</p>"},{"location":"linux/cli-magic/","title":"CLI Magic","text":"<p>These are the commands I reach for when things get real.</p>"},{"location":"linux/cli-magic/#navigation-discovery","title":"Navigation &amp; Discovery","text":"<ul> <li><code>cd</code></li> <li><code>ls</code></li> <li><code>find</code> </li> <li><code>tree</code></li> <li><code>locate</code> </li> <li><code>du</code> </li> <li><code>df</code> </li> <li><code>pwd</code> </li> <li><code>readlink</code></li> </ul>"},{"location":"linux/cli-magic/#system-info-process-control","title":"System Info &amp; Process Control","text":"<ul> <li><code>top</code> </li> <li><code>htop</code></li> <li><code>ps</code></li> <li><code>lsof</code></li> <li><code>uptime</code></li> <li><code>free</code></li> <li><code>vmstat</code> </li> <li><code>dmesg</code></li> </ul>"},{"location":"linux/cli-magic/#file-text-manipulation","title":"File &amp; Text Manipulation","text":"<ul> <li><code>cat</code></li> <li><code>less</code></li> <li><code>head</code></li> <li><code>tail</code></li> <li><code>cut</code></li> <li><code>sort</code></li> <li><code>uniq</code></li> <li><code>awk</code></li> <li><code>sed</code></li> <li><code>wc</code></li> <li><code>xargs</code></li> <li><code>tee</code></li> </ul>"},{"location":"linux/cli-magic/#permissions-users","title":"Permissions &amp; Users","text":"<ul> <li><code>chmod</code></li> <li><code>chown</code></li> <li><code>usermod</code></li> <li><code>whoami</code></li> <li><code>groups</code></li> <li><code>sudo</code></li> <li><code>passwd</code></li> </ul>"},{"location":"linux/cli-magic/#networking","title":"Networking","text":"<ul> <li><code>ping</code></li> <li><code>ip</code></li> <li><code>ss</code></li> <li><code>netstat</code></li> <li><code>dig</code></li> <li><code>nslookup</code></li> <li><code>curl</code></li> <li><code>wget</code></li> <li><code>traceroute</code></li> <li><code>nmap</code></li> </ul>"},{"location":"linux/cli-magic/#archives-packages","title":"Archives &amp; Packages","text":"<ul> <li><code>tar</code></li> <li><code>zip</code></li> <li><code>unzip</code></li> <li><code>dpkg</code></li> <li><code>apt</code></li> <li><code>rpm</code></li> <li><code>dnf</code></li> <li><code>pacman</code></li> </ul>"},{"location":"linux/cli-magic/#dangerous-but-useful","title":"Dangerous but Useful","text":"<ul> <li><code>rm -rf</code></li> <li><code>dd</code></li> <li><code>mkfs</code></li> <li><code>mount</code></li> <li><code>umount</code></li> <li><code>kill</code></li> <li><code>pkill</code></li> <li><code>reboot</code></li> <li><code>shutdown</code></li> </ul>"},{"location":"linux/cli-magic/#misc-meta","title":"Misc &amp; Meta","text":"<ul> <li><code>alias</code></li> <li><code>history</code></li> <li><code>!</code> </li> <li><code>man</code></li> <li><code>which</code></li> <li><code>type</code></li> <li><code>time</code></li> <li><code>yes</code></li> </ul>"},{"location":"linux/cli-magic/#cat","title":"cat","text":"<p>What it does: It shows what is inside the file you append.  </p> <p>Example: I use it all the time to read out the flag on some CTF's. </p> <p>Tip: Awesomt for any automation, where you want to work with some text inside a file.  Just use <code>cat | secondCommand</code>. That also makes it perfect for searching though large files, like logs, together with <code>grep</code></p>"},{"location":"linux/cli-magic/#cd","title":"cd","text":"<p>What it does: Let's you move to the directory of your choosing.  </p> <p>Tip: Don't forget about the special usecases:  </p> <ul> <li><code>..</code> move up the file structure</li> <li><code>~</code> move to home directory of the current user</li> <li><code>/</code> move to root, but also let's you move anywhere you want, as long as you know the path</li> </ul>"},{"location":"linux/cli-magic/#chmod","title":"chmod","text":"<p>What it does: Used to change permissions of a file.</p> <p>Real use case: Whenever you make a script so you are actually able to run it. </p> <p>Example: In the example above, making a file executable, it would like that <code>chmod -x [file]</code></p> <p>Tip: Learning the numbercodes is extremly helpful. First number for the user, second for the group, and last for others. Each digit represents a combination of read (4), write (2), and execute (1). </p>"},{"location":"linux/cli-magic/#ls","title":"ls","text":"<p>What it does: Shows the inside of the current directory.</p> <p>Tip: Best used with a <code>-al</code> flag to list all files in long format.</p>"},{"location":"linux/cli-magic/#ping","title":"ping","text":"<p>What it does: Sends an ICMP echo request to a target host. </p> <p>Real use case: Perfect to test if there is a connection. Eighter to the target on the way in, or from the mashine on the way out (by pinging something that is alway reachable)</p> <p>Example: <code>ping 8.8.8.8</code> to try to ping the google DNS server, which should always work if you have connection to the internet. </p> <p>Tip: Is often used to monitor server uptime from afar, by regularly sending a ping. </p>"},{"location":"notes/projects/digital-dojo/","title":"Building a Digital Dojo","text":""},{"location":"notes/projects/digital-dojo/#how-i-built-my-digital-dojo-using-mkdocs","title":"How I Built My Digital Dojo Using MkDocs","text":""},{"location":"notes/projects/digital-dojo/#1-installing-python","title":"1. Installing Python","text":"<ul> <li> <p>First things first: checking if Python was already installed. I tested that by running <code>py --version</code> or <code>python --version</code></p> </li> <li> <p>Since it wasn't installed on my machine, I installed it using: <pre><code>winget install --id Python.Python.3 --source winget\n</code></pre> This was the cleanest, most straightforward way to do it via PowerShell.</p> </li> <li> <p>Then I hit my first bump in the road: <code>py --version</code> worked, but <code>python --version</code> didn\u2019t. So I had to figure out the difference.</p> </li> </ul> Difference between <code>py</code> and <code>python</code> commands <ul> <li>To fix this, I disabled the Microsoft Store\u2019s shortcut under: <pre><code>Settings &gt; Apps &gt; App execution aliases\n</code></pre> That forced <code>python</code> to point to the real install.</li> </ul>"},{"location":"notes/projects/digital-dojo/#py-is-the-launcher-python-is-the-interpreter","title":"<code>py</code> is the launcher. <code>python</code> is the interpreter.","text":"<ul> <li> <p><code>py</code> is a small helper that comes with the official Python install on Windows. Its job is to find and launch the right Python version. </p> </li> <li> <p><code>python</code> is the actual interpreter \u2014 the program that runs your code.</p> </li> </ul>"},{"location":"notes/projects/digital-dojo/#why-does-this-matter","title":"Why does this matter?","text":"<p>Because <code>py</code> usually works even if your PATH isn't set up right. But <code>python</code> might be broken, hijacked, or just point to the wrong thing (like the Microsoft Store version).</p> <p>Bottom line:</p> <ul> <li>Use <code>py</code> when your system is fresh and you\u2019re still figuring things out.</li> <li>But for full control and compatibility (especially with scripts, tools, and virtual environments), make sure <code>python</code> points to your real install \u2014 and then use <code>python</code> from that point forward.</li> </ul> <p>If <code>py</code> is the butler, <code>python</code> is the king. Eventually, you don\u2019t want to talk to the butler anymore.</p>"},{"location":"notes/projects/digital-dojo/#2-installed-mkdocs","title":"2. Installed MkDocs","text":"<ul> <li> <p>This was straightforward. I installed MkDocs using pip:  <pre><code>pip install mkdocs\n</code></pre></p> </li> <li> <p>I picked a good spot for my project folder, navigated into it, and ran:  <pre><code>mkdocs new .\n</code></pre> This initialized a fresh MkDocs site in the current directory. </p> </li> </ul>"},{"location":"notes/projects/digital-dojo/#3-git-github-setup","title":"3. Git &amp; GitHub Setup","text":"<ul> <li> <p>I checked if Git was installed  <pre><code>git --version\n</code></pre> It wasn\u2019t, so I installed it using:  <pre><code>winget install --id git.git -e\n</code></pre></p> </li> <li> <p>Then I configured Git with:  <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your@email.com\"\n</code></pre></p> </li> <li>I initialized my repo and set up the remote: <pre><code>git init\ngit remote add origin https://github.com/YOUR_USERNAME/my-wiki.git\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\n</code></pre></li> <li>That\u2019s where I hit the next wall: the push failed. Why? Because I hadn\u2019t set up GitHub authentication on this machine. </li> </ul> GitHub setup <p>Since this was a fresh install, I needed to authenticate with GitHub using SSH:</p> <ul> <li>Generated an SSH key (<code>ssh-keygen</code>) and copied the public key.</li> <li>Added the key to GitHub under Settings &gt; SSH and GPG keys.</li> <li>Switched the Git remote to use SSH:</li> </ul> <pre><code>git remote set-url origin git@github.com:username/repo.git\n</code></pre> <ul> <li>With that out of the way, I built and deployed the site: <pre><code>mkdocs build\nmkdocs gh-deploy\n</code></pre> MkDocs created a gh-pages branch with only the built site and pushed it to GitHub \u2014 ready to be served.</li> </ul>"},{"location":"notes/projects/digital-dojo/#4-whats-next","title":"4. What's Next","text":"<ul> <li>Writing actual content: The infrastructure\u2019s ready. Now comes the real work: documenting ideas, tools, commands, thoughts.</li> <li>Structuring the knowledge: Tags, categories, maybe a TOC plugin. I want a digital brain that grows with me.</li> <li>Styling the site: Playing with themes (starting with Material for MkDocs) and customizing fonts, colors, and layout.</li> </ul>"}]}