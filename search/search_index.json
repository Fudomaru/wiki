{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Digital Dojo","text":"<p>\u201cThe faintest ink is better than the best memory.\u201d</p> <p>Welcome to my Digital Dojo, part lab notebook, part black book, part brain dump. This isn\u2019t a blog. It\u2019s not a portfolio. It\u2019s my system. My memory, externalized. My training ground, documented.  </p> <p>What you'll find here:</p> <ul> <li>Linux Wizardry: Real-world tricks, CLI sorcery, and system insights</li> <li>Cybersecurity: Core knowledge, personal playbooks, and tools of the trade</li> <li>CTFs &amp; Wargames: Walkthroughs, failures, and wins \u2014 OverTheWire, HTB, TryHackMe</li> <li>Notes: Certs, reading lists, tech write-ups, and more</li> </ul> <p>This space evolves with me. Some notes are polished. Others are messy. That\u2019s the point \u2014 it\u2019s all part of the grind.</p> <p>Don\u2019t read. Steal. Fork ideas. Twist commands. Make them yours.</p>"},{"location":"about/","title":"About","text":"<p>Hi, I\u2019m Fudomaru, system administrator, cybersecurity apprentice, and relentless learner.</p> <p>I built this wiki to:</p> <ul> <li>Think in public (even if the public is just future-me)</li> <li>Document every lesson worth remembering</li> <li>Build a habit of writing as I learn</li> </ul> <p>What drives me?</p> <ul> <li>The elegance of a perfectly tuned Linux system</li> <li>The thrill of cracking open a CTF box</li> <li>The idea that clarity is power, and this wiki is how I forge it</li> </ul> <p>My endgame? Offensive security. Bug bounty. Mastery.</p> <p>Right now, I\u2019m leveling up my fundamentals and leaving a paper trail as I go.</p>"},{"location":"auto/deploy/","title":"MkDocs Auto-Deploy Script (Powershell)","text":""},{"location":"auto/deploy/#overview","title":"Overview","text":"<p>Automates committing and deploying changes to my Digital Dojo. I build this as a first step to understanding and using a real CI/CD for this project.  For that I needed to solve going to every command by hand. But I didn't want to start using any fancy tool for this simple task. So I decided to make this simple script to automate it.  </p>"},{"location":"auto/deploy/#functional-breakdown","title":"Functional Breakdown","text":"<p>Here I am going to break down what I put into this script: </p>"},{"location":"auto/deploy/#1-location","title":"1. Location","text":"<p>I wanted this to be portable and usable without much of a hustle. So I put the script right into the repo of this page. This way I can always use it as long as I pulled the repo to work on it.  I needed to make sure it runs from the right place: the rood of my repo. To get this location in Powershell I used the following:  </p> <pre><code>$ScriptPath = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent\n$WikiRoot = Join-Path $ScriptPath \"..\" | Resolve-Path\nSet-Location $WikiRoot \n</code></pre>"},{"location":"auto/deploy/#2-git-commit-comment","title":"2. Git Commit Comment","text":"<p>To actually use git commit I have to have a comment of what I am commiting. I wanted to solve this by using an argument I can just put in after the script to make it feel like a real command. That wasn't good enough. When I tried it and it worked, I thought it would be enough.  But even the second try I just forgot about the comment. So I needed a fallback method. And what better option then just let the script ask the user for the Commit Message. That would look like that: </p> <pre><code>if ($args.Length -gt 0 -and -not [string]::IsNullOrWhiteSpace($args[0])) {\n$message = $args[0]\n} else {\n$message = Read-Host \"Enter commit message\"\n}\n</code></pre>"},{"location":"auto/deploy/#3-git-operations","title":"3. Git Operations","text":"<p>This is actually the most straight forward. Just the git commands I normally use by hand. But I did not want to make it quite as easy for myself. So I tried myself with some error catching and outputting what was successful and what failed. All in all I just used a simple try catch with an output of what was currently running when it failed ($_). This gives always gives me a good idea of where the error happend, and let me look at the right thing to try to figure out what went wrong. Also I put the $message variable I got in the previouse part as the commit message.  </p> <pre><code>try {\n    git add .\n    git commit -m \"$message\"\n    if ($?) {\n        Write-Host \"Commit successful\"\n    } else {\n        Write-Host \"Commit failed\"\n    }\n\n    git push\n    if ($?) {\n        Write-Host \"Push successful\"\n    } else {\n        Write-Host \"Push failed\"\n    }\n}\ncatch {\n    $errorMessage = \"An error occurred at $(Get-Date): $_\"\n    Write-Host $errorMessage\n}\n</code></pre>"},{"location":"auto/deploy/#4-githup-pages","title":"4. GitHup Pages","text":"<p>Here I used MkDocs own command gh-deploy. This command pretty much handels everything I need for me. First it builds the actual site. That would be the same as running <code>mkdocs build</code>. Then it pushes this build to a seperate branch in my repo. This way I do not have to have the build site in my main branch, and just tell GitHub to use the seperate branch to deploy from. This works like a charme, without a lot of hassle so far. I put this right after my git operations. <pre><code>mkdocs gh-deploy\n    if ($?) {\n        Write-Host \"Deployment successful\"\n    } else {\n        Write-Host \"Deployment failed\"\n    }\n</code></pre></p>"},{"location":"auto/deploy/#future-ideas","title":"Future Ideas","text":"<ul> <li> <p>Building in local logging to get more information and maintain everything cleanly for building a full CI/CD. </p> </li> <li> <p>Timestemping inside the commit message and log output. </p> </li> </ul>"},{"location":"ctf/overthewire/bandit/","title":"bandit","text":""},{"location":"ctf/overthewire/bandit/#level-0","title":"Level 0","text":"<p>So first of all: The setup: OvertheWire is something I found as a good way to get started with CTFs.  Bandit is a simple Linux machine, setup in a way, where each \"flag\" you find is the password for the next level. With this password you can access the machine over SSH, using the level as a username. It is aimed at absolute beginners, teaching the basics of Linux and playing CTFs.  For each level you get a list with new introduced commands, which can help you with figuring out what to do. </p>"},{"location":"ctf/overthewire/bandit/#level-0-level-1","title":"Level 0 \u2192 Level 1","text":"<p>The first level is mainly to get the setup right. It explains that you connect over SSH over port 2220 to bandit.labs.overthewire.org. The username is bandit0 and the password for the first level is given -&gt; also bandit0.  </p>"},{"location":"ctf/overthewire/bandit/#my-setup","title":"My Setup:","text":"<p>I don't really want to miss out with the Linux experience, so I use WSL2 on my Windows machine. It worked like a charm. </p>"},{"location":"ctf/overthewire/bandit/#new-commands","title":"New Commands","text":"<p>For this there was only one command given: SSH This is used to get a secure remote access to another machine. You use this general format: <code>ssh username@connection.address</code> In this case that would look like this: <code>ssh bandit0@bandit.labs.overthewire.org</code></p>"},{"location":"ctf/overthewire/bandit/#my-solutions","title":"My Solutions","text":"<p>I think for this the most important step is to not forget about the port. At first I wanted to just skip reading and try things out, thinking of the way a port is put in an URL. My first try was this: <code>ssh bandit0@bandit.labs.overthewire.org:2220</code> That was obviously wrong. So I did have to figure out what the right way was. I wanted to improve in figuring out this the right way, so instead of looking it up online, I opened the man pages. And shortly after that I found it. I had to use a -p flag to give it the port to use. So I got connected with: <code>ssh -p bandit0@bandit.labs.overthewire.org:2220</code> </p> <p>So I was connected. It was a nice greeting in consol, giving a bit more information on the game.  </p> <p>But I wasn't done.  </p> <p>There was still something missing. The flag, or to be correct: The password for the next level. I started just looking around. With <code>ls</code> I found the conveniently placed readme file. I looked at it with <code>cat readme</code> and there it was: the FLAG!</p>"},{"location":"ctf/overthewire/bandit/#level-1-level-2","title":"Level 1 \u2192 Level 2","text":""},{"location":"ctf/overthewire/bandit/#new-commands_1","title":"New Commands","text":"<p>ls , cd , cat </p>"},{"location":"ctf/overthewire/bandit/#my-solutions_1","title":"My Solutions","text":"<p>I am always suprised on how easy it is to make regular things seam special. It was practically the same thing then the level before. This time the file just wasn't called \"readme\", but \"-\". So just tiping in the normal command wouldn't work. But this time I actually had the problem before. So I did the following: <code>cat ./-</code></p>"},{"location":"ctf/overthewire/bandit/#level-2-level-3","title":"Level 2 \u2192 Level 3","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_2","title":"My Solutions","text":"<p>Since there where no new commands, and in the level description it told me the file name with the flag, I just went on trying <code>cat</code> again. This time went pretty easy for me, since I accidently found the right answer. Sometimes I am pretty lazy, so I use tab to autocomplete a lot. And here it saved me from figuring out on my own how to deal with spaces in filenames. <code>cat spaces\\ in\\ this\\ filename</code></p>"},{"location":"ctf/overthewire/bandit/#level-3-level-4","title":"Level 3 \u2192 Level 4","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_3","title":"My Solutions","text":"<p>No new commands. From the description it was about finding a \"hidden\" file. For this I used <code>cd</code> to get to the folder, and then used the following to show the hidden file: <code>ls -al</code> I know technically I only need the -a to see all, but I do like the look of -l, and it is a lot better for me to just remember -al like I want to see al(l). Then it was just the now typical <code>cat</code> to get to the flag. </p> <p>For most Terminals you can right click somewhere in the Terminal to eighter Copy or Past. Helped me a lot for all these flags.</p>"},{"location":"ctf/overthewire/bandit/#level-4-level-5","title":"Level 4 \u2192 Level 5","text":""},{"location":"ctf/overthewire/bandit/#new-commands_2","title":"New Commands","text":"<p>file</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_4","title":"My Solutions","text":"<p>So again: No new commands, so I guess I can just <code>cat</code> all the files in there. Or so I tought. I was really surprised to find output in front of my bash setup. It wasn't too bad, and just brute forcing my way though all 10 files, it was easy to find the human readable file and the flag.  </p>"},{"location":"ctf/overthewire/bandit/#but","title":"but","text":"<p>I couldn't let it be. So I started searching for to figure out if a file is human readable first. It felt like that would be the right solution. So after thinking about it, and trying to find a clear path to \"human readable\" in the help of different commands, I setteled on the file command. It tells me what something is, and maybe I can tell from the type which is the right one. This is what I ended up using, and it only put one file as ASCII instead of data or a PGP Secret Sub-Key.  <code>file ./*</code></p>"},{"location":"ctf/overthewire/bandit/#level-5-level-6","title":"Level 5 \u2192 Level 6","text":""},{"location":"ctf/overthewire/bandit/#new-commands_3","title":"New Commands","text":"<p>find</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_5","title":"My Solutions","text":"<p>So for this I had to do a bit more reading. I kinda looked into the <code>find</code> command for the last level, but since <code>file</code> seamed to work so good I stopped at that. So in the Level description I got following clue: - human-readable - 1033 bytes in size - not executable Taking my time, going though the man page of find, the first thing useable I got was <code>-size</code>. With this you can search for files with a specific size. For me that meant trying it out and seeing how much I got back, just filtering with the size. I run: <code>find . -size 1033c</code> </p>"},{"location":"ctf/overthewire/bandit/#level-6-level-7","title":"Level 6 \u2192 Level 7","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_6","title":"My Solutions","text":"<p>For this I was greeted with a new search. But this time in a bigger haystack. The whole server. The clues this time: - owned by user bandit7 - owned by group bandit6 - 33 bytes in size</p> <p>So first I had to try the same thing I did Level 5: <code>find / -size 33c</code> This found me a whole lot of different stuff. So I had to go to the next step and figure out how to search for ownership. Back to the <code>man</code> page for me. But I didn't wanted to try to read though everything again. So I thought to be really clever figured out how to search on the <code>man</code> pages. This is done with <code>/ WhatYouWantToSearch</code>. With this it was a lot easier to find out the right command to find the user and group. <code>find / -user bandit7 -group bandit6 -size 33c</code> But still there where way to many files, most of which the permission was denied to me anyway. Going though it, with most of them I had no permissions to look at them anyway. So a quick google search came up with this to check the return code. Then it saves everything that is coded with an standard error (2) to the dedicated place for deletion: <code>find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</code> </p>"},{"location":"ctf/overthewire/bandit/#level-7-level-8","title":"Level 7 \u2192 Level 8","text":""},{"location":"ctf/overthewire/bandit/#new-commands_4","title":"New Commands","text":"<p>grep, strings, base64</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_7","title":"My Solutions","text":"<p>So for this level there where a whole lot of new commands. The Info for this was as follows: The password for the next level is stored in the file data.txt next to the word millionth That meant I now what to do: <code>cat data.txt | grep millionth</code></p>"},{"location":"ctf/overthewire/bandit/#level-8-level-9","title":"Level 8 \u2192 Level 9","text":""},{"location":"ctf/overthewire/bandit/#new-commands_5","title":"New Commands","text":"<p>sort, uniq </p>"},{"location":"ctf/overthewire/bandit/#my-solutions_8","title":"My Solutions","text":"<p>So same set up, but the only line of text that occurs only once. For this I imidiatly went to the <code>sort</code> command. I thought that would make it easy. But I was wrong. Probably I could just go though the output and find the line that only occurs once. But I want it clean. If at all possible just giving me the one line I need. I went looking, but didn't find anything in the sort command. Back to the list with new commands. Kind of ashamed I saw that the next command is called <code>uniq</code>. If that is not made for finding something only existing once in the file. After reading though the man page, I figured I would need to use both. In the end it looked something like that: <code>sort data.txt | uniq -u</code></p>"},{"location":"ctf/overthewire/bandit/#level-9-level-10","title":"Level 9 \u2192 Level 10","text":""},{"location":"ctf/overthewire/bandit/#new-commands_6","title":"New Commands","text":"<p>string</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_9","title":"My Solutions","text":"<p>So I have a data.txt, but it is all gibberish. Again needing to go back to the description. It is supposed to be the only human readable string preceded by several =. For me the imidiat problem is that several is not very specific. But leaving that for the end, I needed to find some good way to look for the right part. I though for the equal sign I can just use <code>qrep</code>. Sadly that wouldn't want to work. Back to the commands. Just checking the next in line, since they seam to come in order, gave me this final answer: <code>strings data.txt | grep \"==\"</code></p>"},{"location":"ctf/overthewire/bandit/#level-10-level-11","title":"Level 10 \u2192 Level 11","text":""},{"location":"ctf/overthewire/bandit/#new-commands_7","title":"New Commands","text":"<p>base64  </p>"},{"location":"ctf/overthewire/bandit/#my-solutions_10","title":"My Solutions","text":"<p>Going though the description first this time I learned, that the data this time  is base64 encoded. So it seams it was pretty straight forward. Reading though the docu for <code>base64</code> and building a functioning command to use it. <code>base64 -d data.txt</code></p>"},{"location":"ctf/overthewire/bandit/#level-11-level-12","title":"Level 11 \u2192 Level 12","text":""},{"location":"ctf/overthewire/bandit/#new-commands_8","title":"New Commands","text":"<p>tr  </p>"},{"location":"ctf/overthewire/bandit/#my-solutions_11","title":"My Solutions","text":"<p>With this I had a bit more problems. I feel like I have heared it somewhere before, so I search online for what this actually is. This is how I found ROT13. With that knowledge I just tried looking at the next command. <code>tr</code> is for translating or deleting charaters in a text. So I knew what I had to do. Delete every letter with the corresponding one. <code>cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m'</code> </p>"},{"location":"ctf/overthewire/bandit/#level-12-level-13","title":"Level 12 \u2192 Level 13","text":""},{"location":"ctf/overthewire/bandit/#new-commands_9","title":"New Commands","text":"<p>tar, gzip, bzip2, xxd  </p>"},{"location":"ctf/overthewire/bandit/#my-solutions_12","title":"My Solutions","text":"<p>So for this the info for the level recomanded to make a directory to work at. I did as I was told. Then I started working my way though everything saving every step of the way. First I converted the hex dump back with: <code>xxd -d data</code> Afterwards I always look what conversion was used with <code>file</code>, then changed the name to have the apropriat ending with <code>mv</code> and used the fitting decompression command. This I needed to do 10 times until finally -&gt; filetype: ASCII Finally I was done and had the password.  </p>"},{"location":"ctf/overthewire/bandit/#level-13-level-14","title":"Level 13 \u2192 Level 14","text":""},{"location":"ctf/overthewire/bandit/#new-commands_10","title":"New Commands","text":"<p>ssh, telnet, nc, openssl, s_client, nmap</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_13","title":"My Solutions","text":"<p>This was pretty exciting for me. I am a big fan of using keys and what happens when it gets into the wrong hands. This might be why I never saved the password for level 14. I copied the privat key and used it to connect directly to the bandit14 account. But I do know you are supposed to connect to bandit14 from your bandit13 account. The command for that would be: <code>ssh -i sshkey.private -p 2220 bandit14@localhost</code></p>"},{"location":"ctf/overthewire/bandit/#level-14-level-15","title":"Level 14 \u2192 Level 15","text":""},{"location":"ctf/overthewire/bandit/#new-commands_11","title":"New Commands","text":"<p>nc</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_14","title":"My Solutions","text":"<p>For this I was really unsure what to do at first. Okay that is not quite true. The level description actually tells me exactly what to do. However, I was unsure how to send something to a port.   This means I went to the internet to figure it out. And found out that I can use netcat for it. So I connected to the port using <code>nc localhost 30000</code> and send the password.  And promt I got the new password for bandit15.  </p>"},{"location":"ctf/overthewire/bandit/#level-15-level-16","title":"Level 15 \u2192 Level 16","text":""},{"location":"ctf/overthewire/bandit/#new-commands_12","title":"New Commands","text":"<p>openssl, s_client</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_15","title":"My Solutions","text":"<p>I used the openSSL s_client to connect to localhost Port 30001.  It worked very smoothly and I send the password for the level. <code>opelssl s_client -connect localhost:30001</code></p>"},{"location":"ctf/overthewire/bandit/#level-16-level-17","title":"Level 16 \u2192 Level 17","text":""},{"location":"ctf/overthewire/bandit/#new-commands_13","title":"New Commands","text":"<p>nmap</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_16","title":"My Solutions","text":"<p>First I scanned the given portspace with nmap also trying to find out the service version. <code>nmap -p 31000-32000 --open -sV localhost</code> The options made the port I needed pretty clear. Next I thought to pretty much just do what I did in the last level. First it did not work and made me really scatch my head.  </p> <p>So after I quite literally smashed my head against the keyboard I finally stumbled upon a solution. I got the connection to the port. I also seam to have the right password, since if I put anything else in, I got the message \"wrong password\" and it kicked me of the connection. But for my password, I only got KEYUPDATED and not the actuall key. I do not know why, but for some reason I could not find out how to look at the key. My solution finally was this: <code>openssl s_client -nocommands -connect localhost:31790</code> With that I avoided the KEYUPDATED information, and instead got the key, which I used like in one of the earlier levels to connect via a SSL key.  </p>"},{"location":"ctf/overthewire/bandit/#level-17-level-18","title":"Level 17 \u2192 Level 18","text":""},{"location":"ctf/overthewire/bandit/#new-commands_14","title":"New Commands","text":"<p>diff</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_17","title":"My Solutions","text":"<p>In comparison with the last level, I felt like it was to easy to work. But I pretty much just used <code>diff</code> to compare the old and new password files. And used the result to log into the next level.  </p>"},{"location":"ctf/overthewire/bandit/#level-18-level-19","title":"Level 18 \u2192 Level 19","text":""},{"location":"ctf/overthewire/bandit/#new-commands_15","title":"New Commands","text":"<p>scp</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_18","title":"My Solutions","text":"<p>So I really liked this idea from the start. Instead of just logging in and finding the password, you are actually logged out. Or at least something like it. When you log in you are imidiatly kicked back out.  </p> <p>So I logged back unto level 17 to see if I can just open the readme file from there. But of course I did not have the permissions to do so. Also I looked at the .bashrc file to see if I can figure out how exactly it works, and how I can get around it. But while looking at it, I had another idea. And so I used folling command to copy the readme file to my own mashine. <code>scp -P 2220 bandit18@bandit.labs.overthewire.org:/home/readme ./bandit18pass</code></p>"},{"location":"ctf/overthewire/bandit/#level-19-level-20","title":"Level 19 \u2192 Level 20","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_19","title":"My Solutions","text":"<p>This one was really straight forward. Just do what you are told in the description and you get the password. But it is made to teach about setuid and what that means, so I need to learn more about it. </p>"},{"location":"ctf/overthewire/bandit/#level-20-level-21","title":"Level 20 \u2192 Level 21","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_20","title":"My Solutions","text":"<p>This I found also really interessting. I couldn't get tmux to work, which is why I will not put it as a new command here. But I do need to learn how to use it. Instead I connected twice, the old fashen way. I just opened two terminals, and connected both over SSH. After that it was just a matter of knowing what to do. On the one side I opened a nc listener, and connected to it with the setuid from the other side. Then I gave the setuid the password, and got the next one out.  </p>"},{"location":"ctf/overthewire/bandit/#level-21-level-22","title":"Level 21 \u2192 Level 22","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_21","title":"My Solutions","text":"<p>For this I got to see cronjobs for the first time, at least in this game. I went to look at the bandit22 job in /etc/con.d/ folder. Here I found a script, and looking at it I just needed to cat the file the password got saved in.  </p>"},{"location":"ctf/overthewire/bandit/#level-22-level-23","title":"Level 22 \u2192 Level 23","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_22","title":"My Solutions","text":"<p>The first part was just like the last level. Looking at the cronjob_bandit23.sh I understood that it did some conversion with md5sum and a sentence that contains a variable from the current whoami command. With that I recreated that converstion using bandit23 as the variable. Then it creates a temp file with this as the name and saves the password from the current user in it. This file I could just cat to see the next flag.  </p>"},{"location":"ctf/overthewire/bandit/#level-23-level-24","title":"Level 23 \u2192 Level 24","text":""},{"location":"ctf/overthewire/bandit/#new-commands_16","title":"New Commands","text":"<p>chmod</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_23","title":"My Solutions","text":"<p>Same trick new rules. This was really fun for me because I really had to think about what permissions really mean and on how many levels they work. I found the script that was run by cron every minute at the same place as the last. It is pretty much to excecute everything in a specific folder and afterwards delete everything in that folder. But one small problem for me. The scripts only runs if the executable is owned my Bandit23. Shouldn't be hard since that is where I already am. But still a bit eye opening for me. The permissions of access is determined by the one that executes, even if the owner of the script is someone else. So I made this to just copy the pass into my temp file: <pre><code>#!/bin/bash\ncat /etc/bandit_pass/bandit24 &gt; /tmp/tmp.RXVt3VhFpv/pass24.txt\n</code></pre> Should work like a charm. I checked the permissions, and the ownership and made sure everything is correct with chmod. After moving it into the write folder, I was waiting for cron to run to get the password. It never happened. Then it tool quite a while for me to figure out, that Bandit24 didn't have permission to write into my temp folder, so as soon as I changed that, everything worked.  </p>"},{"location":"ctf/overthewire/bandit/#level-24-level-25","title":"Level 24 \u2192 Level 25","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_24","title":"My Solutions","text":"<p>For this I could either try ever 10000 possiblities by hand, or I had to come up with a script. So the script it was: <pre><code>#!/bin/bash\n\npassword=\"Old Password\"\n{\n    for pin in $(seq -w 0000 9999); do\n        echo \"$password $pin\"\n    done\n} | nc localhost 30002\n</code></pre></p>"},{"location":"ctf/overthewire/bandit/#level-25-level-26","title":"Level 25 \u2192 Level 26","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_25","title":"My Solutions","text":"<p>So I guess this one I can easily just scip. You get a SSL Key for level 26. That is why it wasnt ever important for me not have the normal shell. I just grabbed the key to the next level and was out of there.    </p>"},{"location":"ctf/overthewire/bandit/#level-26-level-27","title":"Level 26 \u2192 Level 27","text":""},{"location":"ctf/overthewire/bandit/#new-commands_17","title":"New Commands","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_26","title":"My Solutions","text":"<p>Small Window to get <code>more</code>. Use V to get into vim. Use <code>:term shell</code> to normally get a shell in the top half of the termanl.  </p> <p>With that you can get a shell and take what you need, like the password for bandait26 just to be sure to have it. It is saved in the same spot all the other passwords are saved, and can just be read out: <code>cat /ect/bandit_pass/bandit26</code> </p> <p>But that isn't it. You also have to get to bandit27 from here, or get the password somehow. Luckely the solution for that came from Bandit19.  </p>"},{"location":"ctf/overthewire/bandit/#level-27-level-28","title":"Level 27 \u2192 Level 28","text":""},{"location":"ctf/overthewire/bandit/#new-commands_18","title":"New Commands","text":"<p>git</p>"},{"location":"ctf/overthewire/bandit/#my-solutions_27","title":"My Solutions","text":"<p>So for this you have to use <code>git</code> for the first time. But it was not too difficult yet. You have to clone the repo, and make sure you are on the right port. <code>git clone ssh://bandit27-git@bandit.labs.overthewire.org:2220/h ome/bandit27-git/repo</code> After that I just took a look inside, found a readme file, and there was the pass for the next level.  </p>"},{"location":"ctf/overthewire/bandit/#level-28-level-29","title":"Level 28 \u2192 Level 29","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_28","title":"My Solutions","text":"<p>The description for this level was the same as the last one. So I went the same way and cloned the repo, and looked at the readme file. It desplayed the the credentials of Bandit29, but the password was xxxxxxxx. Since I know git is a version control, I thought that is probably the feature for me to learn about. So I looked at the perviouse commits with: <code>git log</code> And in one of them I found the comment fix info leak and in the one before it read add missing data. So of course I needed to look at the add missing data commit just to see what that meant. <code>git checkout &lt;commit-hash&gt;</code> That reverted me back to the version befor the info leak fixing. And now it was just a matter of looking at the readme file, and copying the password.  </p>"},{"location":"ctf/overthewire/bandit/#level-29-level-30","title":"Level 29 \u2192 Level 30","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_29","title":"My Solutions","text":"<p>Same stepps as in the last two levels. But no results. So I looked at the different branches. <code>git branch -r</code> There were severeal branches, but the one that imidiatly took my interest was origin/sploits-dev. So I got to work. <code>git pull origin sploits-dev</code> Pulled the branch I wanted to take a look at. <code>cat exploits/horde5.md</code> Let me see what is in there. But there wasn't anything in there. So I took a look at the previouse versions. There had to be something, but after reading the comment add some silly exploit, just for shit and giggles I knew. They played with me. So I went back to look at the other branches. I saw the branch origion/dev and thought to myself: Since the readme file said for password not in Production that would be a strong hint, that maybe the dev branch already has something. So I want to the dev branch and looked at the readme file, and found the password. <code>git fetch origin dev</code> <code>git switch dev</code> <code>cat README.md</code></p>"},{"location":"ctf/overthewire/bandit/#level-30-level-31","title":"Level 30 \u2192 Level 31","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_30","title":"My Solutions","text":"<p>Same same. Just cloned the repo, looked at the log and the branches. And found nothing. After a while of searching online, what all you can do with git, I found tags. I looked at the tags and found: secret <code>git tag</code> <code>git show secret</code> </p>"},{"location":"ctf/overthewire/bandit/#level-31-level-32","title":"Level 31 \u2192 Level 32","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_31","title":"My Solutions","text":"<p>Again I cloned the repo and looked at the readme file. This one had a really interesting description of what I needed to do. I had to upload a file with specific conditions. So I got to work.  <pre><code>echo 'May I come in?' &gt; key.txt\n</code></pre> I also needed to delete the <code>*.txt</code> from the .gitignor file to get everything to work.  Then it was just: <pre><code>git add .\ngit commit \"something clever\"\ngit push\n</code></pre> And I got the next password back. </p>"},{"location":"ctf/overthewire/bandit/#level-32-level-33","title":"Level 32 \u2192 Level 33","text":""},{"location":"ctf/overthewire/bandit/#my-solutions_32","title":"My Solutions","text":"<p>This was a lot of fun. When I arrived, I found this: <code>WELCOME TO THE UPPERCASE SHELL</code> So I tought, that should not make too much of a difference. But I was very wrong. Non of the previously learned commands worked. But I could try around and see if I find something good to do. After searching though the web for shell commands that only use uppercase, I pretty much only found the variables. So I looked though them to see what there is. Maybe I can use one of them to escape this uppercase shell, just like the level desciption suggested. I found one: <code>$0</code> With that I was back to something more usefull. But for convinence I wanted more. <code>/bin/bash</code> got me to something I was used too. But there was still the problem with getting the next level password. At least until I noticed that I am already bandit33, so I just went to the usuall place and get my password.  <code>cat /etc/bandit_pass/bandit33</code></p> <p>Conclution</p> <p>With this I got though all of the bandit levels. I think it is an awesome experiance, a lot of fun, and you can learn a lot of the basic commands and structure of a Linux system. Also you get used to the idea of not knowing something, and figuring it out on you own. </p>"},{"location":"cybersec/fundamentals/","title":"Cybersec Fundamenals","text":""},{"location":"cybersec/fundamentals/#what-is-this-page","title":"What is this Page","text":"<p>This is my personal crash course into cybersecurity. I use it to track concepts, tools and tactis I pick up and get to use efficantly in CTFs and during my learning.  </p> <p>It evolves as I learn!</p>"},{"location":"cybersec/fundamentals/#the-mindset-of-a-hacker","title":"The Mindset of a Hacker","text":"<ul> <li> <p>Thinking outside the box: Try to find as many ways to use tools and systems as you can. There is never the right way, there are only endless possibilities.  </p> </li> <li> <p>The Why is more important then the How: Understanding why something is done, the motivation and psychologie behind it, you find the weak points.  </p> </li> <li> <p>No is not an option: You often get the best results, after nothing works and you have to get creative.  </p> </li> <li> <p>See the System: To figure something out, and really understand it, it is often recommended to take a step back.   </p> </li> <li> <p>Attention to Detail: Pay close attention to every detail and be persistent in figuring out the why.   </p> </li> <li> <p>\"Man lernt nie aus\": This is not just a phrase, it is a philosophy  </p> </li> </ul>"},{"location":"cybersec/fundamentals/#core-concepts-to-understand","title":"Core Concepts to Understand","text":"<ul> <li> <p>CIA Triade: The three core parts to make things secure. Look at this on every level, from singel packages to complete infrastructures. If any is missing, that is where things go wrong.  </p> </li> <li> <p>OWASP Top 10: The most commen vulnarbilities found in the wild. Learn them, know them, and look for them everywhere.  </p> </li> <li> <p>Defense in depth: Layering security strategies, always know that every layer will be breached. So configure every layer like it is the first and last defence.  </p> </li> <li> <p>Privilege escalation: Type of attack where a unauthorized user gains access to more then they should. There are two ways for that, vertical and horizontal. Vertical movement is going up the food ladder, to management and admin. Horizontal means staying on your permission level, but accessing a different user, gaining confidentail data.  </p> </li> <li> <p>Post Exploitation: Don't forget that most seriouse attackers are not done after they get access. They will try to get persistence, escalate privileges, and gather information.  </p> </li> </ul>"},{"location":"cybersec/fundamentals/#tools-i-use","title":"Tools I use","text":"<ul> <li> <p>nmap: Networkscanner of choice. </p> </li> <li> <p>Burp Suite: Package interception, changing and exploring of WebApps on a new level.  </p> </li> <li> <p>John the Ripper: Because weak passwords are still more common then you think.  </p> </li> <li> <p>ffuf: Because Enumerating is at least half of the game.  </p> </li> <li> <p>netcat: The Swiss army knife of raw Networking Connections.  </p> </li> </ul>"},{"location":"cybersec/fundamentals/#my-learning-plan","title":"My Learning Plan","text":"<p>Phase 1: Basics - get as much Hands on as you can. Phase 2: Enumeration - try to learn to understand systems quickly. Phase 3: Exploration - warming up with all the common bugs. Phase 4: Real World - getting my Hands dirty in Bug Bounty</p>"},{"location":"cybersec/playbooks/recon/","title":"Inital Target Scope","text":"<p>Define what the target is. Find the domains, subdomains, IP range. What Infrastructure do they use, what company profiles are attackable and in scope. This sets the boundaries and makes sure it is clear where the recon begins and where it ends.  </p>"},{"location":"cybersec/playbooks/recon/#engagement-type","title":"Engagement Type","text":"<p>First it is essential to clearly define what are you doing your recon for. What is the goal.  You need to define if you are doing a CTF, a Pentest or if you are going for a bug bounty.</p>"},{"location":"cybersec/playbooks/recon/#rules-of-engagement-roe","title":"Rules of Engagement (RoE)","text":"<p>Take a detailed look in the rules you are to follow. If something is not clear, it needs to be adressed. Is social engineering in scope? Are destructive payloads prohibited? Can you fuzz login forms? What are the time restrictions? It is important that everything is documented and everyone involved understands the rules.  </p>"},{"location":"cybersec/playbooks/recon/#in-scope","title":"In Scope","text":"<p>It need to be clearly defined. What domains, subdomains, etc. can be attackt. What about third-party services? You have to be very clear. </p>"},{"location":"cybersec/playbooks/recon/#out-of-scope","title":"Out of Scope","text":"<p>You also need to define specific services, IPs, domains that are not to be touched. Partners, shared infrastructure or production critical services.  </p>"},{"location":"cybersec/playbooks/recon/#success-criteria","title":"Success Criteria","text":"<p>Also really important to define. You want to know when you are done, when you have done your job. It should be clear, that no system is ever completly save, it always depends a multitude of things if and when it will be owned. But what is actually needed to count it as success. </p>"},{"location":"cybersec/playbooks/recon/#logistics-authorization","title":"Logistics &amp; Authorization","text":"<p>Which accounts are authorized. What about VPN, access tokes. You need a explicit permission to go through with it. What is your point of contact if anything happens. Do you have a \"get out of jail\" card? </p> <p>Warning</p> <p>No moving forward until this part is airtight. </p>"},{"location":"cybersec/playbooks/recon/#passive-recon","title":"Passive Recon","text":"<p>Definition</p> <p>Collecting information without touching the target. Stay a ghost by watching, not touching. The rule is: No traffic hits their servers. </p>"},{"location":"cybersec/playbooks/recon/#osint-open-source-intelligence","title":"OSINT (Open-Source Intelligence)","text":"<p>Tool and techniques:  </p> <ul> <li>crt.sh, CertSpotter, Censys, Shodan, ZoomEye, Hunter.io</li> <li>Employee footprinting  (LinkedIn, GitHub, Twitter)</li> <li>WHOIS &amp; DNS history</li> <li>Archive.org (Wayback Machine)</li> </ul> <p>Trying to extract all public data about the target without making direct contact.  Your Building the dossier befor stepping on the field. </p>"},{"location":"cybersec/playbooks/recon/#subdomain-enumeration","title":"Subdomain Enumeration","text":"<p>Tools: </p> <ul> <li>Amass (passive mode), Subfinder, Assetfinder, Findomain </li> </ul> <p>Sources:</p> <ul> <li>Certificate Transparency Logs</li> <li>Public DNS data aggregation (VirusTotal, dns.bufferover.run) </li> </ul> <p>This is to find potentail subdomains without touching the target. Create a list of possiblities to make the next stepps easier for yourself. </p>"},{"location":"cybersec/playbooks/recon/#dns-enumeration","title":"DNS Enumeration","text":"<ul> <li>Passive DNS record discovery </li> <li>Zone history (SecurityTrails, PassiveTotal)</li> </ul> <p>Helps to understand the infrastruture layout and potentail service endpoints. </p>"},{"location":"cybersec/playbooks/recon/#technologie-figerprinting","title":"Technologie Figerprinting","text":"<p>Tools: </p> <ul> <li>Wappalyzer</li> <li>BuiltWith</li> <li>Netcraft</li> <li>WhatWeb</li> </ul> <p>You can start to understand the stack with the used languages, frameworks, CMS and libraries used. </p>"},{"location":"cybersec/playbooks/recon/#codebase-asset-hunting","title":"Codebase &amp; Asset Hunting","text":"<ul> <li>You can look for public GitHub repos by target name </li> <li>Identify exposed .git, .env, .bak, etc. in the Waybackmashine </li> <li>also looking for though Pastbin, Gist or leaks from your target can be helpful </li> </ul> <p>Here it is not unlikly to come across old credentials, forgotten endpoints or internal code what helps you extract how things are done to find the logic and structure behind it. </p>"},{"location":"cybersec/playbooks/recon/#thrid-party-enumeration","title":"Thrid-Party Enumeration","text":"<p>Figuring out about third partries they use. </p> <ul> <li>SSO provider</li> <li>Marketing tools</li> <li>used CDN</li> <li>Library dependencies</li> </ul> <p>Mapping dependencies and weak links can help you find differenct attack vectors. </p>"},{"location":"cybersec/playbooks/recon/#notes-to-take","title":"Notes to take:","text":"<p>You need to start building you documentation here. Here is what you write down: - Domains - Subdomains - Tech stacks - Notable files/ leaks</p> <p>Also you should start making a inital map about the internal sturcture. This helps you to fit everything else you find into its place.  </p>"},{"location":"cybersec/playbooks/recon/#outcome","title":"Outcome","text":"<p>By the end of this stage this is what you should have:  </p> <ul> <li>A list of target domains/ subdomains</li> <li>Public known infrastructure</li> <li>Highlevel service stack</li> <li>Potentail weak links from external assets</li> <li>Initial attack surface mindmap</li> </ul>"},{"location":"cybersec/playbooks/recon/#active-recon","title":"Active Recon","text":"<p>Definition</p> <p>Here you are interacting with the target's Infrastructure directly. You are scanning and probing. Since you are sending packages, here you are leaving fingerprints and should be aware of that. </p>"},{"location":"cybersec/playbooks/recon/#port-scanning","title":"Port scanning","text":"<ul> <li>Discovering open ports and determine their state</li> <li>Understanding exposed surface area</li> <li>Tools: nmap, rustscan, masscan</li> </ul>"},{"location":"cybersec/playbooks/recon/#service-enumation","title":"Service Enumation","text":"<ul> <li>Idenfy running services and versions</li> <li>Fingerprint protocols, grab banners, test endpoints</li> <li>Tools: nmap, netcat, telnet, whatweb, httpx</li> </ul>"},{"location":"cybersec/playbooks/recon/#authentication-access-points","title":"Authentication &amp; Access Points","text":"<ul> <li>Scan for login portals across services: SSH, FTP, RDP, Telnet</li> <li>Identify entry points that may lead to further attack vectors</li> <li>Tools: hydra, ncrack, meduse </li> </ul>"},{"location":"cybersec/playbooks/recon/#info-leaks","title":"Info Leaks","text":"<ul> <li>Interact with services to provoke behavior to test for leaks, misconfigs, or sloppy responses </li> <li>Think SMPT, VRFY, FTP misconfigs or SSH MOTD leaks</li> <li>Tools: netcat, curl, openssl</li> </ul>"},{"location":"cybersec/playbooks/recon/#notes-to-take_1","title":"Notes to take:","text":"<p>Document everything you find. Put the new finds in the old documentation, mark the still active subdomains, fill out your map of the infrastructure. Complete with where you find which ports and services. </p>"},{"location":"cybersec/playbooks/recon/#outcome_1","title":"Outcome","text":"<p>By the endof this stage this is what you should have: </p> <ul> <li>List of reachable hosts with open ports and active services</li> <li>Serivce versions with potential weak configs</li> <li>Authentication endpoints and any possible misconfigurations</li> <li>A prioritized attack surface with targets worth deeper inspection </li> <li>Clear specification what need Web Recon to start the next phase with. </li> </ul>"},{"location":"cybersec/playbooks/recon/#web-recon","title":"Web Recon","text":"<p>Digging deep into web services. There is normally a lot to find. From hidden dirctories, files, over headers used. Find the login portals. Specifiy where attack surface is. </p>"},{"location":"cybersec/playbooks/recon/#identifying-web-assets","title":"Identifying Web Assets","text":"<p>You should already have a pretty good idea of the web assets after the last steps. But you should make yourself a specified plan of what you need to takle in this section. </p>"},{"location":"cybersec/playbooks/recon/#clientside-logic","title":"Clientside Logic","text":"<ul> <li>Parse JavaScript files manually or with tools </li> <li>Find API endpoints, secrets and tokens</li> <li>Map JS-based routing and hidden funktionality</li> </ul>"},{"location":"cybersec/playbooks/recon/#input-vectors","title":"Input Vectors","text":"<ul> <li>Query strings, forms and hidden inputs</li> <li>File uploaders, search bars and filters</li> <li>Are there any client-side validations?</li> </ul>"},{"location":"cybersec/playbooks/recon/#session-handling-authentication-behavior","title":"Session Handling &amp; Authentication Behavior","text":"<ul> <li>Cookie flags, token behavior, session expiry</li> <li>Authentication flows (login, rest, MFA)</li> <li>Redirect behavior, caching</li> <li>Version leaks, misconfigs </li> </ul>"},{"location":"cybersec/playbooks/recon/#notes","title":"Notes","text":"<ul> <li>Put everything you find to your map</li> <li>Mark interesting targets, that might offer more</li> </ul>"},{"location":"cybersec/playbooks/recon/#outcome_2","title":"Outcome","text":"<p>You should be able to tie findings to potential exploitation paths. Through the exploration of headers and forms, you have a solid understanding of what your targets exposes on the web and where to dig deeper. </p>"},{"location":"cybersec/playbooks/recon/#enumeration","title":"Enumeration","text":"<p>Here you want to see what is used. Finding every service and protocol they use. You need to provoke, record and understand every response. </p>"},{"location":"cybersec/playbooks/recon/#tools-to-use","title":"Tools to use:","text":"<ul> <li>SMB shares</li> <li>HTTPS services</li> <li>FTP</li> <li>DNS zone transfer attempts</li> <li>SNMP</li> </ul>"},{"location":"cybersec/playbooks/recon/#vulnerability-enumeration","title":"Vulnerability Enumeration","text":"<p>Now that you have loads of information, it is time to look where you can actually get somewhere. Look for known vulnerabilities for services they use, use vuln scanner and look though CVEs. Match exposed services with weaknesses. </p>"},{"location":"cybersec/playbooks/recon/#tools-to-use_1","title":"Tools to use:","text":"<ul> <li>Nikto</li> <li>Searchsploit</li> <li>CVE search</li> </ul>"},{"location":"cybersec/playbooks/recon/#documentation","title":"Documentation","text":"<p>Most underated weapon. Espacially for recon. With down everything you have. Go over your notes. Make them usefull. You need to be able to find everything you wrote down in an instand. </p>"},{"location":"cybersec/toolbelt/nmap/","title":"Nmap","text":""},{"location":"cybersec/toolbelt/nmap/#what-it-is","title":"What it is","text":"<p>Network mapper used for host descovery and port scanning. </p>"},{"location":"cybersec/toolbelt/nmap/#core-usage","title":"Core Usage","text":"<ul> <li><code>-sS</code>: SYN scan</li> <li><code>-p-</code>: all ports</li> <li><code>-A</code> : aggressive mode</li> </ul>"},{"location":"cybersec/toolbelt/nmap/#examples","title":"Examples","text":"<p><code>nmap -sS -p- -T4 TARGET</code></p>"},{"location":"cybersec/toolbelt/nmap/#used-in","title":"Used in","text":"<ul> <li>Recon</li> </ul>"},{"location":"linux/cli-magic/","title":"CLI Magic","text":"<p>These are the commands I reach for when things get real.</p>"},{"location":"linux/cli-magic/#navigation-discovery","title":"Navigation &amp; Discovery","text":"<ul> <li><code>cd</code></li> <li><code>ls</code></li> <li><code>find</code> </li> <li><code>tree</code></li> <li><code>du</code> </li> <li><code>df</code> </li> <li><code>pwd</code> </li> <li><code>readlink</code> </li> </ul>"},{"location":"linux/cli-magic/#system-info-process-control","title":"System Info &amp; Process Control","text":"<ul> <li><code>top</code> </li> <li><code>htop</code></li> <li><code>ps</code></li> <li><code>lsof</code></li> <li><code>uptime</code></li> <li><code>free</code></li> <li><code>vmstat</code> </li> <li><code>dmesg</code></li> </ul>"},{"location":"linux/cli-magic/#file-text-manipulation","title":"File &amp; Text Manipulation","text":"<ul> <li><code>cat</code></li> <li><code>less</code></li> <li><code>head</code></li> <li><code>tail</code></li> <li><code>cut</code></li> <li><code>sort</code></li> <li><code>uniq</code></li> <li><code>awk</code></li> <li><code>sed</code></li> <li><code>wc</code></li> <li><code>xargs</code></li> <li><code>tee</code></li> </ul>"},{"location":"linux/cli-magic/#permissions-users","title":"Permissions &amp; Users","text":"<ul> <li><code>chmod</code></li> <li><code>chown</code></li> <li><code>usermod</code></li> <li><code>whoami</code></li> <li><code>groups</code></li> <li><code>sudo</code></li> <li><code>passwd</code></li> </ul>"},{"location":"linux/cli-magic/#networking","title":"Networking","text":"<ul> <li><code>ping</code></li> <li><code>ip</code></li> <li><code>ss</code></li> <li><code>ssh</code></li> <li><code>netstat</code></li> <li><code>dig</code></li> <li><code>nslookup</code></li> <li><code>curl</code></li> <li><code>wget</code></li> <li><code>traceroute</code></li> <li><code>nmap</code></li> <li><code>nc</code></li> </ul>"},{"location":"linux/cli-magic/#archives-packages","title":"Archives &amp; Packages","text":"<ul> <li><code>tar</code></li> <li><code>zip</code></li> <li><code>unzip</code></li> <li><code>dpkg</code></li> <li><code>apt</code></li> <li><code>rpm</code></li> <li><code>dnf</code></li> <li><code>pacman</code></li> </ul>"},{"location":"linux/cli-magic/#dangerous-but-useful","title":"Dangerous but Useful","text":"<ul> <li><code>rm -rf</code></li> <li><code>dd</code></li> <li><code>mkfs</code></li> <li><code>mount</code></li> <li><code>umount</code></li> <li><code>kill</code></li> <li><code>pkill</code></li> <li><code>reboot</code></li> <li><code>shutdown</code></li> </ul>"},{"location":"linux/cli-magic/#misc-meta","title":"Misc &amp; Meta","text":"<ul> <li><code>alias</code></li> <li><code>history</code></li> <li><code>!</code> </li> <li><code>man</code></li> <li><code>which</code></li> <li><code>type</code></li> <li><code>time</code></li> <li><code>yes</code></li> </ul>"},{"location":"linux/cli-magic/#cat","title":"cat","text":"<p>What it does: It shows what is inside the file you append.  </p> <p>Example: I use it all the time to read out the flag on some CTF's. </p> <p>Tip: Awesomt for any automation, where you want to work with some text inside a file.  Just use <code>cat | secondCommand</code>. That also makes it perfect for searching though large files, like logs, together with <code>grep</code></p>"},{"location":"linux/cli-magic/#cd","title":"cd","text":"<p>What it does: Let's you move to the directory of your choosing.  </p> <p>Tip: Don't forget about the special usecases:  </p> <ul> <li><code>..</code> move up the file structure</li> <li><code>~</code> move to home directory of the current user</li> <li><code>/</code> move to root, but also let's you move anywhere you want, as long as you know the path</li> </ul>"},{"location":"linux/cli-magic/#chmod","title":"chmod","text":"<p>What it does: Used to change permissions of a file.</p> <p>Real use case: Whenever you make a script so you are actually able to run it. </p> <p>Example: In the example above, making a file executable, it would like that <code>chmod -x [file]</code></p> <p>Tip: Learning the numbercodes is extremly helpful. First number for the user, second for the group, and last for others. Each digit represents a combination of read (4), write (2), and execute (1). </p>"},{"location":"linux/cli-magic/#du","title":"du","text":"<p>What it does: Calculates actual disk space used by files and directories. </p> <p>Real use case: Good to identify how the space is used in case of low disk space.  </p> <p>Tip: You can pipe it through <code>sort -rh</code> to sort it by biggest size first. </p>"},{"location":"linux/cli-magic/#find","title":"find","text":"<p>What it does: Used to search for files in a specifed directory. You can search for all kinds of properties that you already know about it. </p> <p>Real use case: I used it to find the flag while playing OWT Bandit. For the level you got the size and some of the properties of the flag, and had to find it. </p> <p>Example: <code>find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</code> That is how I found the specific flag.  Tip: I really want to remember the 2&gt;/dev/null part for throwing out strerr. </p>"},{"location":"linux/cli-magic/#htop","title":"htop","text":"<p>What it does: An enhanced, interactive version of <code>top</code> with better visuals and controls. </p> <p>Real use case: Quickly kill, renice, or inspect processes without needing multiple commands</p> <p>Tip: It is really important do learn the short cuts and ways to use it to be effectiv. </p>"},{"location":"linux/cli-magic/#ls","title":"ls","text":"<p>What it does: Shows the inside of the current directory.</p> <p>Tip: Best used with a <code>-al</code> flag to list all files in long format.</p>"},{"location":"linux/cli-magic/#nc","title":"nc","text":"<p>What it does: Used for everything concering connections via TCP or UDP. You can do soo much with it that it would probably be to much for this little section, and I need to make a whole page for netcat in the futur. </p> <p>Real use case: Mainly to set up listeners to get a reverse shell. That would look something like this: <code>nc -l 1234</code> Also netcat can be used to connect to some port and set it something manuel or in a script. </p>"},{"location":"linux/cli-magic/#ping","title":"ping","text":"<p>What it does: Sends an ICMP echo request to a target host. </p> <p>Real use case: Perfect to test if there is a connection. Eighter to the target on the way in, or from the mashine on the way out (by pinging something that is alway reachable)</p> <p>Example: <code>ping 8.8.8.8</code> to try to ping the google DNS server, which should always work if you have connection to the internet. </p> <p>Tip: Is often used to monitor server uptime from afar, by regularly sending a ping. </p>"},{"location":"linux/cli-magic/#ps","title":"ps","text":"<p>What it does: Prints out the current processes. </p> <p>Real use case: Audit running processes precisely, grep specific patterns, or script behavior. </p> <p>Tip: <code>ps faux</code> shows process hierachy, kind of like tree for files. This really helps with finding out where everything is comming from.  </p>"},{"location":"linux/cli-magic/#ssh","title":"ssh","text":"<p>What it does: Creates a secure connetion with access to the local terminal. </p> <p>Real use case: Maintaining remote servers where it is not reasonable to have direkt access, and which might not have a GUI.</p> <p>Example: Accessing the Bandit Wargame from OvertheWire: <code>ssh -p 2220 bandit0@bandit.labs.overthewire.org</code> </p>"},{"location":"linux/cli-magic/#top","title":"top","text":"<p>What it does: Real-time view of system processes and resource usage. </p> <p>Real use case: Monitor CPU and detect runaway processes. </p> <p>Tip: You can press M to sort instantly by memory usage.  </p>"},{"location":"linux/cli-magic/#tree","title":"tree","text":"<p>What it does: It prints out a skeleton of file system you give it. Awesome to get an overview of where everything lives and to better understand what you are working with.  </p>"},{"location":"linux/cli-magic/#uniq","title":"uniq","text":"<p>What it does: Filter adjacent matching lines. It is mostly used when you have to omit or report repeating lines. Really helpful to dens down loads of data. </p> <p>Real use case: For me it was alo really helpful in one of the OTW Bandit levels. It was mainly designed to teach the <code>uniq</code> command, so I am really excited to find some more real world use cases. </p>"},{"location":"linux/networking/","title":"Linux Networking","text":"Warning <p>This page is a placeholder</p>"},{"location":"linux/networking/#checking-connectivity","title":"Checking Connectivity","text":""},{"location":"linux/networking/#ping","title":"Ping","text":"<p>Test if a host is reachable. Example: <code>ping -c 4 google.com</code></p>"},{"location":"linux/networking/#traceroute","title":"Traceroute:","text":"<p>Shows each hop on the path to a host.</p>"},{"location":"linux/networking/#netstat","title":"Netstat:","text":"<p>Show open ports, listening services. Standard usage: <code>ss -tuln</code> </p>"},{"location":"linux/networking/#curl","title":"Curl","text":"<p>Verify web service responses.</p>"},{"location":"linux/networking/#netcat","title":"Netcat:","text":"<p>Swiss Army Knife of network tools. Good for checking for open ports, connecting to one, sending or resiving TCP or UDP packages. </p>"},{"location":"linux/system-internals/","title":"Prcesses &amp; Signals","text":"Warning <p>This page is a placeholder</p>"},{"location":"linux/system-internals/#why-this","title":"Why this?","text":"<p>This is a core Linux topic. It is always relevant and opens the door for advanced topics like scripting, scheduling and system recovery. If you don't know how Linux handles processes and how you see and handle them, it is very hard to do anything.  </p>"},{"location":"linux/system-internals/#what-is-a-process","title":"What is a Process?","text":"<p>A process is a running instance of a program, identified by a PID.  </p>"},{"location":"linux/system-internals/#basic-commands","title":"Basic Commands:","text":"<p><code>ps aux</code> list all running prcesses <code>top</code> / <code>htop</code> live monitoring <code>kill &lt;PID&gt;</code> kill process by PID <code>pmap &lt;PID&gt;</code> showes memory usage  </p>"},{"location":"linux/system-internals/#common-signals","title":"Common Signals","text":"Signal Explaination SIGTERM polite kill SIGKILL brute-force, can't be caught SIGINT interrupt SIGSTOP pause SIGCONT resume"},{"location":"notes/ccna/","title":"CCNA Training","text":"<p>This is going to be my training for the CCNA. I want the cert for the knowledge, the recognizion of my knowledge comes last. The best way to show you knowledge, is by knowing.  </p>"},{"location":"notes/ccna/#since-i-dont-want-to-scip-anything-important-i-am-going-to-write-a-paragraphe-about-every-topic-mentioned","title":"Since I don't want to scip anything important, I am going to write a paragraphe about every topic mentioned:","text":""},{"location":"notes/ccna/#10-network-fundamentals","title":"1.0 Network Fundamentals","text":"<p>1.1 Explain the role and function of network components 1.1.a Routers 1.1.b Layer 2 and Layer 3 switches 1.1.c Next-generation firewalls and IPS 1.1.d Access points 1.1.e Controllers (Cisco DNA Center and WLC) 1.1.f Endpoints 1.1.g Servers 1.1.h PoE</p> <p>1.2 Describe characteristics of network topology architectures 1.2.a Two-tier 1.2.b Three-tier 1.2.c Spine-leaf 1.2.d WAN 1.2.e Small office/home office (SOHO) 1.2.f On-premise and cloud</p> <p>1.3 Compare physical interface and cabling types 1.3.a Single-mode fiber, multimode fiber, copper 1.3.b Connections (Ethernet shared media and point-to-point)</p> <p>1.4 Identify interface and cable issues (collisions, errors, mismatch duplex, and/or speed)</p> <p>1.5 Compare TCP to UDP</p> <p>1.6 Configure and verify IPv4 addressing and subnetting</p> <p>1.7 Describe private IPv4 addressing</p> <p>1.8 Configure and verify IPv6 addressing and prefix</p> <p>1.9 Describe IPv6 address types 1.9.a Unicast (global, unique local, and link local) 1.9.b Anycast 1.9.c Multicast 1.9.d Modified EUI 64</p> <p>1.10 Verify IP parameters for Client OS (Windows, Mac OS, Linux)</p> <p>1.11 Describe wireless principles 1.11.a Nonoverlapping Wi-Fi channels 1.11.b SSID 1.11.c RF 1.11.d Encryption</p> <p>1.12 Explain virtualization fundamentals (server virtualization, containers, and VRFs)</p> <p>1.13 Describe switching concepts 1.13.a MAC learning and aging 1.13.b Frame switching 1.13.c Frame flooding 1.13.d MAC address table</p>"},{"location":"notes/ccna/#20-network-access","title":"2.0 Network Access","text":"<p>2.1 Configure and verify VLANs (normal range) spanning multiple switches 2.1.a Access ports (data and voice) 2.1.b Default VLAN 2.1.c InterVLAN connectivity</p> <p>2.2 Configure and verify interswitch connectivity 2.2.a Trunk ports 2.2.b 802.1Q 2.2.c Native VLAN</p> <p>2.3 Configure and verify Layer 2 discovery protocols (Cisco Discovery Protocol and LLDP)</p> <p>2.4 Configure and verify (Layer 2/Layer 3) EtherChannel (LACP)</p> <p>2.5 Interpret basic operations of Rapid PVST+ Spanning Tree Protocol 2.5.a Root port, root bridge (primary/secondary), and other port names 2.5.b Port states (forwarding/blocking) 2.5.c PortFast 2.5.d Root guard, loop guard, BPDU filter, and BPDU guard</p> <p>2.6 Describe Cisco Wireless Architectures and AP modes</p> <p>2.7 Describe physical infrastructure connections of WLAN components (AP, WLC, access/trunk ports, and LAG)</p> <p>2.8 Describe network device management access (Telnet, SSH, HTTP, HTTPS, console, TACACS+/RADIUS, and cloud managed)</p> <p>2.9 Interpret the wireless LAN GUI configuration for client connectivity, such as WLAN creation, security settings, QoS profiles, and advanced settings</p>"},{"location":"notes/ccna/#30-ip-connectivity","title":"3.0 IP Connectivity","text":"<p>3.1 Interpret the components of routing table 3.1.a Routing protocol code 3.1.b Prefix 3.1.c Network mask 3.1.d Next hop 3.1.e Administrative distance 3.1.f Metric 3.1.g Gateway of last resort</p> <p>3.2 Determine how a router makes a forwarding decision by default 3.2.a Longest prefix match 3.2.b Administrative distance 3.2.c Routing protocol metric</p> <p>3.3 Configure and verify IPv4 and IPv6 static routing 3.3.a Default route 3.3.b Network route 3.3.c Host route 3.3.d Floating static</p> <p>3.4 Configure and verify single area OSPFv2 3.4.a Neighbor adjacencies 3.4.b Point-to-point 3.4.c Broadcast (DR/BDR selection) 3.4.d Router ID</p> <p>3.5 Describe the purpose, functions, and concepts of first hop redundancy protocols</p>"},{"location":"notes/ccna/#40-ip-services","title":"4.0 IP Services","text":"<p>4.1 Configure and verify inside source NAT using static and pools</p> <p>4.2 Configure and verify NTP operating in a client and server mode</p> <p>4.3 Explain the role of DHCP and DNS within the network</p> <p>4.4 Explain the function of SNMP in network operations</p> <p>4.5 Describe the use of syslog features including facilities and levels</p> <p>4.6 Configure and verify DHCP client and relay</p> <p>4.7 Explain the forwarding per-hop behavior (PHB) for QoS, such as classification, marking, queuing, congestion, policing, and shaping</p> <p>4.8 Configure network devices for remote access using SSH</p> <p>4.9 Describe the capabilities and functions of TFTP/FTP in the network</p>"},{"location":"notes/ccna/#50-security-fundamentals","title":"5.0 Security Fundamentals","text":"<p>5.1 Define key security concepts (threats, vulnerabilities, exploits, and mitigation techniques)</p> <p>5.2 Describe security program elements (user awareness, training, and physical access control)</p> <p>5.3 Configure and verify device access control using local passwords</p> <p>5.4 Describe security password policies elements, such as management, complexity, and password alternatives (multifactor authentication, certificates, and biometrics)</p> <p>5.5. Describe IPsec remote access and site-to-site VPNs</p> <p>5.6 Configure and verify access control lists</p> <p>5.7 Configure and verify Layer 2 security features (DHCP snooping, dynamic ARP inspection, and port security)</p> <p>5.8 Compare authentication, authorization, and accounting concepts</p> <p>5.9 Describe wireless security protocols (WPA, WPA2, and WPA3)</p> <p>5.10 Configure and verify WLAN within the GUI using WPA2 PSK</p>"},{"location":"notes/ccna/#60-automation-and-progammability","title":"6.0 Automation and Progammability","text":"<p>6.1 Explain how automation impacts network management</p> <p>6.2 Compare traditional networks with controller-based networking</p> <p>6.3 Describe controller-based, software defined architecture (overlay, underlay, and fabric) 6.3.a Separation of control plane and data plane 6.3.b Northbound and Southbound APIs</p> <p>6.4 Explain AI (generative and predictive) and machine learning in network operations</p> <p>6.5 Describe characteristics of REST-based APIs (authentication types, CRUD, HTTP verbs, and data encoding)</p> <p>6.6 Recognize the capabilities of configuration management mechanisms, such as Ansible and Terraform</p> <p>6.7 Recognize components of JSON-encoded data</p> <p>So this are all the topics. If I know about all of them, I am ready to move to the next phase. </p>"},{"location":"notes/warboard/","title":"WARBOARD","text":"What is this for? <p>This is a plan for me to keep myself real. I write down what I am currently working on, what is planed next, and what are general ideas for the future.  </p>"},{"location":"notes/warboard/#active-operations","title":"ACTIVE OPERATIONS","text":"Info <p>Tasks that I am currently working on.</p> <ul> <li>Working though OWT Natas and documenting it.</li> <li>Cybersecurity Sturctur: Nmap</li> <li>Restructure considering my current knowledge</li> </ul>"},{"location":"notes/warboard/#staging-zone","title":"STAGING ZONE","text":"Info <p>Mental RAM. The stuff I am activly thinking on how to put them in.  </p> <ul> <li>Write secontion on setuid, openssl, permissions in linux</li> <li>Writing the generall CyberSec tools section </li> </ul>"},{"location":"notes/warboard/#strategic-backlog","title":"STRATEGIC BACKLOG","text":"Info <p>Goals for the long time and bigger projects befor I actually start working on them.  </p> <ul> <li>Deep-dive into privilege escalation.</li> <li>Getting picture documentation to work</li> <li>List of file formats and what it means and you can do with it. </li> <li>Explaining where I stand in my Nvim Journy</li> </ul>"},{"location":"notes/warboard/#completed-strikes","title":"COMPLETED STRIKES","text":"Info <p>Trying to keep a brief history and show of what the newes pages are.  </p> <ul> <li>Create automation script for deployment and dokumenting it (2025-05-03)</li> <li>Using Warboard as a way to stay acountable (2025-05-01)</li> <li>Bandit dokumetation (2025-04-30)</li> <li>Adding a Logo (2025-04-27)</li> <li>First draft Cyber Fundamentals (2025-04-23)</li> <li>Adding Filestructure, Home and About Page (2025-04-22)</li> <li>Adding Digital Dojo Project (2025-04-21)</li> </ul>"},{"location":"notes/projects/digital-dojo/","title":"Building a Digital Dojo","text":""},{"location":"notes/projects/digital-dojo/#how-i-built-my-digital-dojo-using-mkdocs","title":"How I Built My Digital Dojo Using MkDocs","text":""},{"location":"notes/projects/digital-dojo/#1-installing-python","title":"1. Installing Python","text":"<ul> <li> <p>First things first: checking if Python was already installed. I tested that by running <code>py --version</code> or <code>python --version</code></p> </li> <li> <p>Since it wasn't installed on my machine, I installed it using: <pre><code>winget install --id Python.Python.3 --source winget\n</code></pre> This was the cleanest, most straightforward way to do it via PowerShell.</p> </li> <li> <p>Then I hit my first bump in the road: <code>py --version</code> worked, but <code>python --version</code> didn\u2019t. So I had to figure out the difference.</p> </li> </ul> Difference between <code>py</code> and <code>python</code> commands <ul> <li>To fix this, I disabled the Microsoft Store\u2019s shortcut under: <pre><code>Settings &gt; Apps &gt; App execution aliases\n</code></pre> That forced <code>python</code> to point to the real install.</li> </ul>"},{"location":"notes/projects/digital-dojo/#py-is-the-launcher-python-is-the-interpreter","title":"<code>py</code> is the launcher. <code>python</code> is the interpreter.","text":"<ul> <li> <p><code>py</code> is a small helper that comes with the official Python install on Windows. Its job is to find and launch the right Python version. </p> </li> <li> <p><code>python</code> is the actual interpreter \u2014 the program that runs your code.</p> </li> </ul>"},{"location":"notes/projects/digital-dojo/#why-does-this-matter","title":"Why does this matter?","text":"<p>Because <code>py</code> usually works even if your PATH isn't set up right. But <code>python</code> might be broken, hijacked, or just point to the wrong thing (like the Microsoft Store version).</p> <p>Bottom line:</p> <ul> <li>Use <code>py</code> when your system is fresh and you\u2019re still figuring things out.</li> <li>But for full control and compatibility (especially with scripts, tools, and virtual environments), make sure <code>python</code> points to your real install \u2014 and then use <code>python</code> from that point forward.</li> </ul> <p>If <code>py</code> is the butler, <code>python</code> is the king. Eventually, you don\u2019t want to talk to the butler anymore.</p>"},{"location":"notes/projects/digital-dojo/#2-installed-mkdocs","title":"2. Installed MkDocs","text":"<ul> <li> <p>This was straightforward. I installed MkDocs using pip:  <pre><code>pip install mkdocs\n</code></pre></p> </li> <li> <p>I picked a good spot for my project folder, navigated into it, and ran:  <pre><code>mkdocs new .\n</code></pre> This initialized a fresh MkDocs site in the current directory. </p> </li> </ul>"},{"location":"notes/projects/digital-dojo/#3-git-github-setup","title":"3. Git &amp; GitHub Setup","text":"<ul> <li> <p>I checked if Git was installed  <pre><code>git --version\n</code></pre> It wasn\u2019t, so I installed it using:  <pre><code>winget install --id git.git -e\n</code></pre></p> </li> <li> <p>Then I configured Git with:  <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your@email.com\"\n</code></pre></p> </li> <li>I initialized my repo and set up the remote: <pre><code>git init\ngit remote add origin https://github.com/YOUR_USERNAME/my-wiki.git\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\n</code></pre></li> <li>That\u2019s where I hit the next wall: the push failed. Why? Because I hadn\u2019t set up GitHub authentication on this machine. </li> </ul> GitHub setup <p>Since this was a fresh install, I needed to authenticate with GitHub using SSH:</p> <ul> <li>Generated an SSH key (<code>ssh-keygen</code>) and copied the public key.</li> <li>Added the key to GitHub under Settings &gt; SSH and GPG keys.</li> <li>Switched the Git remote to use SSH:</li> </ul> <pre><code>git remote set-url origin git@github.com:username/repo.git\n</code></pre> <ul> <li>With that out of the way, I built and deployed the site: <pre><code>mkdocs build\nmkdocs gh-deploy\n</code></pre> MkDocs created a gh-pages branch with only the built site and pushed it to GitHub \u2014 ready to be served.</li> </ul>"},{"location":"notes/projects/digital-dojo/#4-whats-next","title":"4. What's Next","text":"<ul> <li>Writing actual content: The infrastructure\u2019s ready. Now comes the real work: documenting ideas, tools, commands, thoughts.</li> <li>Structuring the knowledge: Tags, categories, maybe a TOC plugin. I want a digital brain that grows with me.</li> <li>Styling the site: Playing with themes (starting with Material for MkDocs) and customizing fonts, colors, and layout.</li> </ul>"},{"location":"projects/echosnare/","title":"EchoSnare","text":""},{"location":"projects/echosnare/#vision","title":"Vision","text":"<p>For a while now I have been interested in Networking.  With that a big part of understanding is working out how everything fits together.  And so I started to think about what I can do to understand where I am, and what surrounds me in the Internet.  What paths does my traffic usually follow.  Can I find out where it differs.  And I already have a few good Ideas of how to start mapping out the cables I am using all day long to talk, game, and watch stuff. </p> <p>Now it also happend that I came across something special.  Something that probably always peaked my interest, but I have never really felt ready to dive deeper.  Well I am ready.  I have learned a lot, and I feel ready to get my feet wet trying to really understand what IoT means, what it is and what it can do.  I found an ESP32 Dev board with battery, case, Oled Display and LoRa Modul.  So what do I want to do with it. Everything.  But for now I want to build my own Wifi_Sniffer.</p>"},{"location":"projects/echosnare/#tools-of-the-hunt","title":"Tools of the Hunt","text":"<p>Here are the tools I plan to use for this project. </p>"},{"location":"projects/echosnare/#hardware","title":"Hardware","text":"<ul> <li>ESP32 LoRa V3 Development Board</li> <li>3000mAh LiPo battery</li> <li>Meshtastic case</li> <li>Smartphone (for eventual geotagging)</li> <li>PC running some Linux Distro</li> </ul>"},{"location":"projects/echosnare/#software","title":"Software","text":"<ul> <li>MicroPython</li> <li>Nvim (with MicroPython plugin)</li> <li>rshell</li> <li>ampy</li> </ul>"},{"location":"projects/echosnare/#gameplan","title":"Gameplan","text":""},{"location":"projects/echosnare/#battle-station-setup","title":"Battle Station Setup","text":"<p>This is the first real move in the direction of actually doing something after the planning phase. I need to get my Nvim setup for MicroPython. For that I need to install all the dependicies I will need to finish this projcet. Then I set up my Nvim to have Highlighting, etc. </p>"},{"location":"projects/echosnare/#flash-and-burn","title":"Flash and Burn","text":"<p>Then the next step will be flashing the right firmware to the board.  I also need to find out which firmware I need since I have already read somewhere there might be a problem with promiscuous mode in there.  Next just making sure it works, and I can start getting to work. </p>"},{"location":"projects/echosnare/#wifi-sniffing-core","title":"WIFI Sniffing Core","text":"<p>This is going to be the first step.  For that I need to enable the sniffing.  Then figure out how I can log what I need and how to save it using onboard flash.  And last I would need to figure out good settings and control over the scanning rate and uptime. </p>"},{"location":"projects/echosnare/#oled-display","title":"OLED Display","text":"<p>Next I will be considering what to do with the already integreted display.  Thinking about it there should probably be some way to display the battery level.  And also maybe a count of how many SSID/MAC adresses I have found and saved.  Maybe I can do a percentage of how full the storage is or something like it. </p>"},{"location":"projects/echosnare/#sync-to-base","title":"Sync to Base","text":"<p>The last thing of the offical project is going to be how I handle syncing the data to my server.  Since this is going to be local, I will probably try to make the ESP32 connect to my local Wifi, and then start a sync automatically.  Maybe I find a better way, but the idea is that I can have it with me,  and only worry about charging it.  The rest should be automated. </p>"},{"location":"projects/echosnare/#geotagging","title":"Geotagging","text":"<p>As a bonus I will try to get some location to my scanned data, and maybe start to build a map.  For that my idea is to use my androids GPS.  And for something special the fun Idea I had was to use my phones ability to create a hotspot for a few seconds and encode the location in the SSID name,  and later convert it back for some general location based on time. </p>"},{"location":"projects/void_linux/","title":"Void_Station_Setup","text":""},{"location":"projects/void_linux/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p><code>Why Void</code></p> </li> <li> <p><code>Pre-Install Decisions</code></p> </li> <li> <p><code>Installation</code></p> </li> <li> <p><code>Post-Install Setup</code></p> </li> <li> <p><code>Graphical Stack</code></p> </li> <li> <p><code>Networking</code></p> </li> <li> <p><code>Final Touches</code></p> </li> <li> <p><code>Lessons learned</code></p> </li> <li> <p><code>Replication Checklist</code></p> </li> </ul>"},{"location":"projects/void_linux/#why-void","title":"Why Void","text":"<p>So for this there can be a lot of reason.  But to be completely honest it comes mostly down to what I found and what sounded interesting.  I have been looking to have something a lot more minimal then my current fedora setup.  But not just minimal, because I still feel that is a bit of a bold statement.  You don't just want something minimal, there is normally a reason even for that.  And with that I am pretty clear:  I want to understand! And the less there is, the more of it you can actually comprehensivly understand.  So starting out with a minimal system, if at all possible staying in the TTY, the possibility is a lot more realistic to actually get how everything works.  To be clear: I do not expect to actually be able to just comprehend the whole linux kernal like that.  But the less I have on top, the less there is to abstract and keep me from actually knowing what is going on. </p> <p>There are a lot more fun things to learn using Void Linux.  But these I figured out after already choosing it, and so I don't want to clame them as my reason. </p>"},{"location":"projects/void_linux/#pre-install-decisions","title":"Pre-Install Decisions","text":"<p>So there had to be a few decisions I had to make before, and for me also during the installation.  The first was choosing the ISO.  But this was relativly easy.  I wanted a clean install without anything.  So even if I would choose a Window Manager later on, I did now want anything like that on my ISO.  Next was the boot method. And there I have to be honest again, since before I started I wanted to see how it workes, I looked though quite a few guides.  Pretty much all of them used the UEFI system.  So that is what I choose. </p> UEFI vs. BIOS <p>So even though I just choose the UEFI because of the information I got.  Mainly BIOS doesn't have a lot of features.  From bigger drives and more partitions. It has also better graphical support and secure boot.  The problem is that I can't really say one of these things are a game breaker for me, so I might have to go back and figure out more details. </p>"},{"location":"projects/void_linux/#installation","title":"Installation","text":"<p>So this was suprisiongly problematic at first. And I still don't really know what went wrong.  First I used the <code>dd</code> command to make the bootable USB form the ISO.  This already impressed me, since I have never used that tool to be honest.  Also a point where I still have a lot of things to learn.  Then booting to the USB, and running <code>void-installer</code> is pretty straight forward. </p> <p>Now I went through the installer one by one, and all seemed pretty logically, I struggled a bit with making sure I have the UEFI partition and choose to use a bit of SWAP too.  Also I wasnt completly sure what groups I would need, so I choose to use almost non, so I could add them later if I can't do something because I am missing them.  That comes back to me understanding what everything is for.  And if you add something because you need it, then you know what it is for by definition. </p>"},{"location":"projects/void_linux/#post-install-setup","title":"Post-Install Setup","text":"<p>So this is where the fun actually begun.  Booting up I was in the tty.  That is pretty much everything I ever wanted from a system.  Reading up on the documentation (https://voidlinux.org) I tried to figure out as much as I could.  But I am still far from understanding everything.</p> <p>The first problem I run into was the font, more spefically the font size.  Don't understand me wrong, I wanted to change the font too, but the size was the acutal problem.  But I couldn't get it to stay persistent for a reboot. To quickly change the the font I used <code>setfont /usr/share/kbd/consolefonts/&lt;font&gt;</code> That works fine, but I needed to find the right config file to change it.  There I did something stupid, which cost me a lot of time. I found the right file to change it very quickly, and just for your info, it is <code>/etc/rc.conf</code> It is pretty self explanatory, just setting the <code>FONT=\"&lt;font&gt;\"</code> to the desired font.  It was also pretty fun to find out that in the tty there isn't really a fontsize.  Since a font in tty is just a bitmap, laying out exactly which bit is part of the letter and which is not, the different size is just a different font. </p> <p>But my problem was that I had a typo in the rc.conf file.  So it did not take it, and I was on the search of how else to change it.  So my big lesson learned is: if it doesn't work as expected, check again.  It might not be that you have the wrong way to do something, it might just be a small mistake costing you sanity.</p> <p>But I was connected to my wifi, and I started updating with <code>xbps-install -Su</code> and installing some basic things I liked.  One of them is neovim. Since I am using NVIM already on my fedora workstation, and I have the setup in my dotfiles repo, I went on trying to connect to that.  For this I installed git and cloned my local dotfiles.  I knew that it probably won't work completly the way I am used to it, since some of my plugins relay on the graphical interface.  Searching it up to be exact it relies on a NerdFont Package and on truecolor.  Since tty is not able to do eighter or, I would just have to get used to it.  To be honest I don't really mind, since it is both just about looks, not about funktionality. </p>"},{"location":"projects/void_linux/#graphical-stack","title":"Graphical Stack","text":"<p>So there we are.  I have set this up with the intention of a tty only minimal system to learn how everything works.  And with that I was pretty much done.  So all that I needed now was to work with it.  But then it started getting to me. I am still in a lot of need for some graphical things.  This is why I needed something.  It needs to be small enough to still fit my feeling of a minimal setup, but I need some basic things to make this my daily driver.  And so I found suckless.  I really liked the idea.  Not just the minimal, from the feeling almost self build setup. I really enjoyed reading there documentation, having to compile it locally also sounded like a lot of fun, and to get to the \"settings\" you just change the code.  That actually sounds exatly like what I want.  To be able to use this system, you have no choice but to understand it.  And I just keeps going like that.  The form of patching also made me smile.  No updates, patches, code changes, and you do what you need to fix things, if you want to. </p> <p>That is why I descided to try my luck.  And I installed not only dwm.  I put ST, Dmenu, and slstatus. At least for now.  I want to try to set everything up and see how that feels.  Everything of that setup brings me closer to the metal, having more controle and for that also generates more understanding and knowledge.  And whatever happens afterwards happens. I would love to go to a tty only setup, but I am just not ready yet. </p>"},{"location":"projects/void_linux/#networking","title":"Networking","text":"<p>So my next step is to setup some good networking without installing any more tools.  I am planing on using dmenu, wpa-supplicant, and dhcped.  That and some bash script should be enough to let me create something very similar to a modern network manager. Or at least the part that is mostly used.  Without all the unnessesary bloat, which no one understands, or needs.  Everything Else comes later. </p>"},{"location":"projects/void_linux/#final-touches","title":"Final touches","text":"<p>There are a few things I want to do.  I started with the thing that bortherd me the most. And then I worked form there.  This way I hoped to build up only what really helps me, and what I want visually. </p>"},{"location":"projects/void_linux/#first-visuals","title":"First Visuals","text":"<p>For that reason I startet with slstatus.  The things I wanted to display are only things that I would actually want to look at.  Something that gives me information I need and want to check regularly.  That came out as following: Time and Date, Battery (since it is Laptop), RAM usage. There is one more thing, which is still a to-do.  And that would be some way to show where I am.  But I want that to be mainly for when I am using SSH, just to have a clear way to see on which mashine I am working on.  That set up I have now looks something like this: </p> <pre><code>static const struct arg args[] = {\n    {datetime, \"%s\", \"%d\"},\n    {datetime, \"%s\", \"%T\"},\n    {battery_perc, \"%s%%\", BAT0},\n    {ram_perc, \"%s%%\", NULL},\n}\n</code></pre> <p>Then I also got myself some Nerd Fonts, put the ones I wanted in dwm and in st and fixed the size, to make everything feel more like home.  And directly after that I also installed the fibonacci patch for dwm, because I think that is one of the most efficent layouts I can think of. </p>"},{"location":"projects/void_linux/#lessons-learned","title":"Lessons learned","text":"<p>With this project there are a lot of things I have learned, and am still learning.  But most of them don't really bolong into a \"lessons learned\" section.  I feel like here should mostly belong things that went wrong and taught me something.  Since this is an ongoing experiment, I think there will still be a lot of things that go wrong. So this part is going to be regularly updated with everything I have learned.</p>"},{"location":"projects/void_linux/#minimalism","title":"Minimalism","text":"<p>With this project I feel like the most important lessons I have learned, is the difference people can see in the same idea.  At the beginning, a minimal system mostly sounded like something without a lot of buttons and programs constantly running.  I thought that it could be a really good looking aesthetic.  Less programms already installed.  And maybe I even recognized a smaller ISO file size.  But working with it, and trying to find my way and make this PC my own, I learned what that really means.  It means that there is a whole lot of things that can be made simpler.  Things that work the way they do, because somewhere there is some edge case that needs them to work that way.  But that also adds a huge amount of noise.  And with a minimal setup, it constrains and makes you think about what you actually want and need.  The best example is networking.  There are a lot of things that can be done in networking. And almost all of these things, I dont need for my day to day work.  For a stationary PC, even if it is connected over wlan, I dont need a menu and all these different settings to manage different SSIDs.  I am not moving a stationary PC.  And I am not changing the SSID of my wlan weekly, or even monthly, probably not even every year.  So in this case, every one of these options is noise. </p> <p>I think this one of the best way for me to explain it.  Maybe I can find a better explaination in the future, but for now that needs to be enough.</p>"},{"location":"projects/void_linux/#replication-checklist","title":"Replication Checklist","text":"<p>Get yourself a base image of Void Linux.  Also you need a USB stick without any important data on it.  Burn the ISO on the USB stick using</p> <pre><code>sudo dd if=/path/to/your.iso of=/dev/sdX bs=4M oflag=sync\n</code></pre> <p>Then you just need to start you pc from the USB.  It starts into the live void system, and you are already almost done.  There are now just a few options you need to set and fit to your liking.  For that, I wouls say you do your own research, but I will give you my settings anyway.  After you start the installation process you just run <code>void-installer</code>.  Going though the different options you need to choose your keyboard and network yourself.  For source I used the network with base installation.  Next is the partioning.  I use cfdisk, and cleaned everything form the PC, because I did my backup beforehand.  I made a 1g efi partition, and put everything else into a file system.  The mount points need to be as following: For the boot partition it is <code>/boot/efi</code> and the root partition is just <code>/</code>. Then you have to create a user and and choose which groups you want to be in.  That is also completly your own choice.  Just one thing that helped my decision.  Since I wanted this to learn how everything works, I didn't choose anything.  I know I can log into root if nessesary, and I can put myself to every group I want to if nessesary.  Then you start the installation and you are pretty much done with everything I will decribe here.  From there you choose what you want. </p>"}]}