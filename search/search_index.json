{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Digital Dojo","text":"<p>\u201cThe faintest ink is better than the best memory.\u201d</p> <p>Welcome to my Digital Dojo, part lab notebook, part black book, part brain dump. This isn\u2019t a blog. It\u2019s not a portfolio. It\u2019s my system. My memory, externalized. My training ground, documented.  </p> <p>What you'll find here:</p> <ul> <li>Linux Wizardry: Real-world tricks, CLI sorcery, and system insights</li> <li>Cybersecurity: Core knowledge, personal playbooks, and tools of the trade</li> <li>CTFs &amp; Wargames: Walkthroughs, failures, and wins \u2014 OverTheWire, HTB, TryHackMe</li> <li>Notes: Certs, reading lists, tech write-ups, and more</li> </ul> <p>This space evolves with me. Some notes are polished. Others are messy. That\u2019s the point \u2014 it\u2019s all part of the grind.</p> <p>Don\u2019t read. Steal. Fork ideas. Twist commands. Make them yours.</p>"},{"location":"about/","title":"About","text":"<p>Hi, I\u2019m Fudomaru, system administrator, cybersecurity apprentice, and relentless learner.</p> <p>I built this wiki to:</p> <ul> <li>Think in public (even if the public is just future-me)</li> <li>Document every lesson worth remembering</li> <li>Build a habit of writing as I learn</li> </ul> <p>What drives me?</p> <ul> <li>The elegance of a perfectly tuned Linux system</li> <li>The thrill of cracking open a CTF box</li> <li>The idea that clarity is power, and this wiki is how I forge it</li> </ul> <p>My endgame? Offensive security. Bug bounty. Mastery.</p> <p>Right now, I\u2019m leveling up my fundamentals and leaving a paper trail as I go.</p>"},{"location":"notes/projects/digital-dojo/","title":"Building a Digital Dojo","text":""},{"location":"notes/projects/digital-dojo/#how-i-built-my-digital-dojo-using-mkdocs","title":"How I Built My Digital Dojo Using MkDocs","text":""},{"location":"notes/projects/digital-dojo/#1-installing-python","title":"1. Installing Python","text":"<ul> <li> <p>First things first: checking if Python was already installed. I tested that by running <code>py --version</code> or <code>python --version</code></p> </li> <li> <p>Since it wasn't installed on my machine, I installed it using: <pre><code>winget install --id Python.Python.3 --source winget\n</code></pre> This was the cleanest, most straightforward way to do it via PowerShell.</p> </li> <li> <p>Then I hit my first bump in the road: <code>py --version</code> worked, but <code>python --version</code> didn\u2019t. So I had to figure out the difference.</p> </li> </ul> Difference between <code>py</code> and <code>python</code> commands <ul> <li>To fix this, I disabled the Microsoft Store\u2019s shortcut under: <pre><code>Settings &gt; Apps &gt; App execution aliases\n</code></pre> That forced <code>python</code> to point to the real install.</li> </ul>"},{"location":"notes/projects/digital-dojo/#py-is-the-launcher-python-is-the-interpreter","title":"<code>py</code> is the launcher. <code>python</code> is the interpreter.","text":"<ul> <li> <p><code>py</code> is a small helper that comes with the official Python install on Windows. Its job is to find and launch the right Python version. </p> </li> <li> <p><code>python</code> is the actual interpreter \u2014 the program that runs your code.</p> </li> </ul>"},{"location":"notes/projects/digital-dojo/#why-does-this-matter","title":"Why does this matter?","text":"<p>Because <code>py</code> usually works even if your PATH isn't set up right. But <code>python</code> might be broken, hijacked, or just point to the wrong thing (like the Microsoft Store version).</p> <p>Bottom line:</p> <ul> <li>Use <code>py</code> when your system is fresh and you\u2019re still figuring things out.</li> <li>But for full control and compatibility (especially with scripts, tools, and virtual environments), make sure <code>python</code> points to your real install \u2014 and then use <code>python</code> from that point forward.</li> </ul> <p>If <code>py</code> is the butler, <code>python</code> is the king. Eventually, you don\u2019t want to talk to the butler anymore.</p>"},{"location":"notes/projects/digital-dojo/#2-installed-mkdocs","title":"2. Installed MkDocs","text":"<ul> <li> <p>This was straightforward. I installed MkDocs using pip:  <pre><code>pip install mkdocs\n</code></pre></p> </li> <li> <p>I picked a good spot for my project folder, navigated into it, and ran:  <pre><code>mkdocs new .\n</code></pre> This initialized a fresh MkDocs site in the current directory. </p> </li> </ul>"},{"location":"notes/projects/digital-dojo/#3-git-github-setup","title":"3. Git &amp; GitHub Setup","text":"<ul> <li> <p>I checked if Git was installed  <pre><code>git --version\n</code></pre> It wasn\u2019t, so I installed it using:  <pre><code>winget install --id git.git -e\n</code></pre></p> </li> <li> <p>Then I configured Git with:  <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your@email.com\"\n</code></pre></p> </li> <li>I initialized my repo and set up the remote: <pre><code>git init\ngit remote add origin https://github.com/YOUR_USERNAME/my-wiki.git\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\n</code></pre></li> <li>That\u2019s where I hit the next wall: the push failed. Why? Because I hadn\u2019t set up GitHub authentication on this machine. </li> </ul> GitHub setup <p>Since this was a fresh install, I needed to authenticate with GitHub using SSH:</p> <ul> <li>Generated an SSH key (<code>ssh-keygen</code>) and copied the public key.</li> <li>Added the key to GitHub under Settings &gt; SSH and GPG keys.</li> <li>Switched the Git remote to use SSH:</li> </ul> <pre><code>git remote set-url origin git@github.com:username/repo.git\n</code></pre> <ul> <li>With that out of the way, I built and deployed the site: <pre><code>mkdocs build\nmkdocs gh-deploy\n</code></pre> MkDocs created a gh-pages branch with only the built site and pushed it to GitHub \u2014 ready to be served.</li> </ul>"},{"location":"notes/projects/digital-dojo/#4-whats-next","title":"4. What's Next","text":"<ul> <li>Writing actual content: The infrastructure\u2019s ready. Now comes the real work: documenting ideas, tools, commands, thoughts.</li> <li>Structuring the knowledge: Tags, categories, maybe a TOC plugin. I want a digital brain that grows with me.</li> <li>Styling the site: Playing with themes (starting with Material for MkDocs) and customizing fonts, colors, and layout.</li> </ul>"}]}